--original hi_flyer
--corrections macron
--refactoring av661194

--схема автомобилей (+инвентарный багажник) с учетом открывающихся двух/трех дверей (левая + правая + дверь багажника, если есть)
--сохранение топлива и содержимого багажника
--для использования двери багажника в конфиг в секцию car_definition добавляем:
--back_doors = true
--back_door_bone = xxx ;имя кости визуально открываемой двери багажника (Shape Type Box, Joint Type Joint)
--также сохраняется при save/load состояние открытой двери багажника (вне зависимости от нахождения гг на одном уровне с авто)

--Новая система открывания дверей.
--Теперь косяков с перехлёстом команд от разных машин быть не должно.
--Команды работают только для ближайшей к ГГ машины или для той, в которой он сидит. 

--Раньше максимальное значение id багажника, которое мы могли сохранять 32768 (тип s16).
--Переделано для сохранения любого возможного id и добавлена совместимость со старыми сохранениями.

--При использовании inventory_box, у машинки, к которой он относится, будет открываться-закрываться багажник (третья дверь, если есть).
--Запасной вариант доступа к багажнику по T.

--Нельзя теперь халявно использовать чужие багажники вместо ящиков.
--Поправлен баг с закрыванием багажника у машин с 2 дверями.
--Мелкие правки бензобака

--С БТРом всё просто - у него не прописаны двери, а использование канистр прописано в функциях открывания дверей. Теперь можно заправлять БТР + поправил надпись на купленном бтре

--Правки для новых БТРов с открывающимися люками + совместимость со старыми сохранениями, где у бтров были люки-фары.

--В совместимости со старыми сохранениями отключена секция, вызывавшая глючный вызов багажника по T за 60 метров.

--заход в БТР без открывания форточек
--открытие багажника по Т в задней части бтра и несколько увеличил зону для захода внутрь .
--у машин не будет неработающих надписей - когда было написано "Открыть " или "Войти", а сколько ни жми - не работало
--ЗаЗ теперь с капотом.

--добавлена проверка, открыто ли меню ГГ (level.main_input_receiver), чтобы предотвратить зависание биндера, если вдруг что-то не сработает 


this.inventory_info = nil --состояние инвентаря актора
this.key_vehicle_door = nil --клавиша открывания двери.
this.unusable_ids = {} --табличка id машин, которые нельзя использовать
local opt_sound = true --звук при открытии дверей.

local dist_tbl = {} --табличка расстояний от машин до ГГ
--local update_doors --переменная для открытия дверей.
local snd_open = sound_object([[car\car_door_open]])
local snd_close = sound_object([[car\car_door_close]])

function printf(text)
	news_manager.send_tip(db.actor,text)
	log1("##"..text)
end
-----------------------------------------------------------------------------------
-- car binder
-----------------------------------------------------------------------------------

function bind(obj)
	local new_binder = car_binder(obj)
--	if obj:spawn_ini() and obj:spawn_ini():section_exist("logic") and obj:spawn_ini():line_exist("logic", "no_bind") and obj:spawn_ini():r_bool("logic", "no_bind") == true then
--		bind_physic_object.init(obj)
--		return
--	end
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "car_binder" (object_binder)

function car_binder:__init(obj) super(obj)
	self.object = obj
-------------------------
	--self.object_name = self.object:name()
	self.needLoad2 = true
	self.upd_data = 0
	self.id = self.object:id()
-------------------------
	self.usable = false
	self.ini = obj:get_visual_ini()
	self.fuel = self.ini:r_float("car_definition", "fuel_tank")
	self.box_id = 0
	self.upd_box_pos_t = 0
	--фразы закрыть-открыть дверь
	self.right_door_open_string = game.translate_string("vehicles_door_open")
	self.right_door_close_string = game.translate_string("vehicles_door_close")
	self.left_door_open_string = game.translate_string("vehicles_door_open")
	self.left_door_close_string = game.translate_string("vehicles_door_close")

	--для дверей
	if self.ini ~= nil then
		if self.ini:line_exist("car_definition", "opening_doors") and self.ini:r_bool("car_definition", "opening_doors") == true then
			self.has_doors = true
			self.doors_sound = true
			self.left_door_bone = self.ini:r_string("car_definition", "left_door_bone")
			self.right_door_bone = self.ini:r_string("car_definition", "right_door_bone")
			self.seat_dist = self.ini:r_float("car_definition", "seat_dist")
			self.doors_dist = self.ini:r_float("car_definition", "doors_dist")
		end

		--инвентируем скорость левого люка БТР
		if self.ini:line_exist("car_definition", "left_door_velocity") then
			self.btr = true
			self.left_door_velocity = self.ini:r_float("car_definition", "left_door_velocity")
		end
		self.left_door_velocity = self.left_door_velocity or 1

		-- кость невидимого багажника
		if self.ini:line_exist("car_definition", "bone_for_invbox") then
			self.bone_for_invbox = self.ini:r_string("car_definition", "bone_for_invbox")
		end
		if self.bone_for_invbox ~= nil and self.bone_for_invbox ~= "nil" then
			self.inv_box = true
		end

		-- для задней двери(если настроена модель и в конфиге тачки прописано back_doors=true и back_door_bone = имя кости)
		if self.ini:line_exist("car_definition", "back_doors") and self.ini:r_bool("car_definition", "back_doors") == true then
			self.back_door_bone = self.ini:r_string("car_definition", "back_door_bone")
		end

		--меняем фразы закрыть-открыть для капота ЗАЗ
		if self.ini:line_exist("car_definition", "left_door_open_string_id") then
			self.left_door_open_string = game.translate_string(self.ini:r_string("car_definition", "left_door_open_string_id"))
		end
		if self.ini:line_exist("car_definition", "left_door_close_string_id") then
			self.left_door_close_string = game.translate_string(self.ini:r_string("car_definition", "left_door_close_string_id"))
		end
	end
end

function car_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.id] = { }
	self.st = db.storage[self.id]
	
	self.health=self.object:get_car() and self.object:get_car():GetfHealth()
end

function car_binder:update(delta)
	object_binder.update(self, delta)

	--чтобы в БТРе (у которого в конфиге стоит opening_doors=false) работали спидометр и клаксон  
	if self.object:get_holder_owner() and not self.actor_in_car then
		self.actor_in_car = true
		dmx_cars.on_vehicle_input(self.id)
	elseif not self.object:get_holder_owner() and self.actor_in_car then
		self.actor_in_car = false
	end

	--если не загрузился нет пакет, то загружаем данные из нет-пакета ГГ
	if self.needLoad2 then
		self:load2()
	end

	if self.inv_box then
		self:UpdateInvBox() --апдейт багажника
	end

	self.position = self.object:position()
	local actor_pos = db.actor:position()
	local distance = self.position:distance_to_sqr(actor_pos)

	--чёто нигде не работает, придётся делать здесь
	if not self.loaded then --при первом апдейте загружаем логику
		self:LoadLogic()
	end

	--открытие/закрытие дверей выносим в отдельные функции
	if self.actor_in_car then
		self:UpdateDoorInCar(distance, actor_pos)
	else
		self:UpdateDoorOutCar(distance, actor_pos)
	end
	
	if self.st.active_section ~= nil or (self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true) then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
		self.object:set_callback(callback.hit, car_binder.hit_callback, self)
		self.object:set_callback(callback.death, car_binder.death_callback, self)
		self.object:set_callback(callback.use_object, car_binder.use_callback, self)
	end
	
	-- для бтра hit_callback не вызывается. заткнём эту дырку.
	if self.health and (not self.nofixonhit) then
		local health=self.object:get_car() and self.object:get_car():GetfHealth()
		if health and self.health-health>0.00001 then
			-- amk.mylog("health decrease for "..self.object:name())
			self.health=health
			self:hit_callback(self.object, self.health-health, vector():set(1,0,0), db.actor, 0)
			self.nofixonhit=nil
		end
	end
	self:save2()
end

function car_binder:use_callback(obj, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end
end

function car_binder:UpdateInvBox()
	if self.box_id ~= 0 then
		if self.upd_box_pos_t < time_global() then
			self.upd_box_pos_t = time_global() + 200
			local pos = self.object:bone_position(self.bone_for_invbox)
			if self.last_car_pos == nil then
					self.last_car_pos = pos
			end
			if pos:distance_to(self.last_car_pos) > 0.5 then -- нет вылета после правки моделей
			--вылеты 0.01 0.02 0.03 0.04 0.05 0.06 0.10
			----pos > 0.2 нет вылета у рафа,лады,есть у зеленой нивы
			-- pos > 1 then -- точно нет вылета
				
				alife():teleport_object(
					nil,
					pos,
					self.object:level_vertex_id(),
					self.object:game_vertex_id(),
					self.box_id
				)

			end
			self.last_car_pos = pos
			this.on_car_box_init(self.box_id, unusable_ids[self.id])
		end
	elseif device().precache_frame <= 1 then
		local sobj = alife():create(
			"inventory_box",
			self.object:bone_position(self.bone_for_invbox),
			self.object:level_vertex_id(),
			self.object:game_vertex_id()
			)
		local tbl = m_net_utils.get_invbox_data(sobj)
		tbl.visual = "physics\\equipment_cache\\box_bagaznik"
		m_net_utils.set_invbox_data(tbl, sobj)
		self.box_id = sobj.id
		this.on_car_box_init(self.box_id, unusable_ids[self.id])
	end
	return
end


function car_binder:LoadLogic()
	xr_logic.initialize_obj(self.object, self.st, self.bLoaded, db.actor, modules.stype_item)

	--исправление подвешенных машин
	self.object:get_physics_shell():apply_force(0.0001,0.0001,0.0001)
	--загрузка топлива
	self.object:set_fuel(self.fuel)

	if not self.has_doors then
		self.object:set_nonscript_usable(false)
		self.usable = false
		self.loaded = true
		return
	end

	--при спауне надо захлопнуть двери(теперь двери сохраняются)
	self.left_door = self.object:get_physics_shell():get_joint_by_bone_name(self.left_door_bone)
	self.right_door = self.object:get_physics_shell():get_joint_by_bone_name(self.right_door_bone)

	--считаем, что у старых БТРов нет люков (всё равно работать не будут)
	if not self.left_door or not self.right_door then
		self.has_doors = false
		self.object:set_nonscript_usable(false)
		self.usable = false
		self.loaded = true
		return
	end

	if self.left_door_open then
		self:open_left_door(true, false)
	else
		self:open_left_door(false, false)
	end
	
	if self.right_door_open then
		self:open_right_door(true, false)
	else
		self:open_right_door(false, false)
	end

	--вставка для задней двери
	if self.back_door_bone then
		self.back_door = self.object:get_physics_shell():get_joint_by_bone_name(self.back_door_bone)
		if self.back_door then	
			if self.back_door_open then
				self:open_back_door(true, false)
			else
				self:open_back_door(false, false)
			end
		end
	end
	----------------------------------------
	self.object:set_nonscript_usable(false)
	self.usable = false

	self.loaded = true
	return
end


function car_binder:UpdateDoorInCar(distance, actor_pos)
	dist_tbl[self.id] = 0
	olr_fuel.car_id = self.id --nil

	--открытие/закрытие дверей - ГГ в кабине
	local update_doors = key_vehicle_door
	key_vehicle_door = nil

	if not self.has_doors then --для старых БТР
		return
	end

	--локальные переменные
	local a = vector()
	local b = vector()
	self.left_door:get_anchor(a)
	self.right_door:get_anchor(b)
	local a_dist = a:distance_to_sqr(actor_pos)
	local b_dist = b:distance_to_sqr(actor_pos)

	local c = vector():set(device().cam_pos:mad(device().cam_dir, 3))
	local c_dist_a = c:distance_to_sqr(a)
	local c_dist_b = c:distance_to_sqr(b)
	----------------------------------------
	if (c_dist_a < c_dist_b and self.left_door_open) or (c_dist_a > c_dist_b and self.right_door_open) then
		if not self.usable_in_car then
			if not self.btr then
				get_console():execute("unbind_console kF")
			end
			self.usable_in_car = true
		end
	else
		if self.usable_in_car then
			if not self.btr then
				get_console():execute("bind_console mm_net_player_name none kF")
			end
			self.usable_in_car = false
		end
	end
			
	if update_doors then
		if c_dist_a < c_dist_b then
			if self.left_door_open then
				self:open_left_door(false, true)
			else
				self:open_left_door(true, true)
			end
		else
			if self.right_door_open then
				self:open_right_door(false, true)
			else
				self:open_right_door(true, true)
			end
		end
	end
	return
end


----------------------------------------------------
function car_binder:UpdateDoorOutCar(distance, actor_pos)
	--ГГ вне машины; заносим в таблицу текущее расстояние до машины
	dist_tbl[self.id] = distance
	local dist_list = {} --служебная табличка
	--заносим сюда все расстояния из общей таблицы
	for k,v in pairs(dist_tbl) do
		dist_list[#dist_list + 1] = v
	end
	--сортируем содержимое по возрастанию
	table.sort(dist_list)
	if distance ~= dist_list[1] then --машина не является ближайшей к актору
		return --больше здесь делать нечего
	end
------------------------------------------------------
	--если машину не купили - то нефиг лазить в багажник и открывать двери
	if unusable_ids[self.id] then
		if use_box_id == self.box_id and inventory_info == "ui_car_body" then
			level.start_stop_menu(level.main_input_receiver(), true)
		end
		olr_fuel.car_id = nil
		use_box_id = nil
		return
	end

	--открываем заднюю дверь при обыске багажника --"ui_car_body_hide"
	if self.box_is_open and inventory_info ~= "ui_car_body" then
		self.box_is_open = false
		if self.back_door and self.back_door_open then
			self:open_back_door(false, true)
		end
	elseif use_box_id == self.box_id then
		self.box_is_open = true --флаг открытого багажника
		if self.back_door and not self.back_door_open then
			self:open_back_door(true, true)
		end
	end
	use_box_id = nil

	if not self.usable_in_car then
		get_console():execute("unbind_console kF")
		self.usable_in_car = true
	end
	 --выдаём команду на действие с дверями
	local update_doors = key_vehicle_door
	key_vehicle_door = nil

	self.object:set_tip_text("")
	if (distance > self.doors_dist*2) then
		olr_fuel.car_id = nil
		return --если расстояние слишком велико, уходим отсюда
	elseif self.btr then
		--схема для бтр
		olr_fuel.car_id = nil
		local inv_pos = self.object:bone_position(self.bone_for_invbox)
		local inv_dist = inv_pos:distance_to_sqr(actor_pos)
		if distance < self.seat_dist then
			if not self.usable then
				self.object:set_nonscript_usable(true)
				self.usable = true
			end
			--установка tip text "Войти "
			self.object:set_tip_text_default()

		elseif inv_dist < self.seat_dist and inv_dist < distance then
			if self.usable then
				self.object:set_nonscript_usable(false)
				self.usable = false
			end
			self.object:set_tip_text(game.translate_string("vehicles_box_t"))
			if update_doors then
				if self.box_is_open then
					local menu = level.main_input_receiver()
					if menu then
						level.start_stop_menu(menu, true)
					end
					self.box_is_open = false
				else
					db.actor:open_inventory_box(level.object_by_id(self.box_id))
					self.box_is_open = true
				end
			end

		end
		return
	end
	olr_fuel.car_id = nil --self.id
	----------------------------------------
	--определяем локальные переменные (чтобы не вычислять их по 10 раз)
	local a = vector()
	local b = vector()
	self.left_door:get_anchor(a)
	self.right_door:get_anchor(b)
	local a_dist = a:distance_to_sqr(actor_pos)
	local b_dist = b:distance_to_sqr(actor_pos)
	--вставка для задней двери
	local d_dist
	if self.back_door then
		local d = vector()
		self.back_door:get_anchor(d)
		d_dist = d:distance_to_sqr(actor_pos)
	end
	----------------------------------------
	if (a_dist < self.seat_dist and self.left_door_open) or (b_dist < self.seat_dist and self.right_door_open) then
		if not self.usable then
			self.object:set_nonscript_usable(true)
			self.usable = true
		end
		--установка tip text "Войти "
		self.object:set_tip_text_default()

	elseif distance < self.doors_dist then
		if self.usable then
			self.object:set_nonscript_usable(false)
			self.usable = false
		end
		--вставка для задней двери
		if d_dist and (d_dist < a_dist and d_dist < b_dist) then
			if self.back_door_open then
				self.object:set_tip_text(game.translate_string("vehicles_back_door_close"))
				if update_doors then
					self:open_back_door(false, true)
				end
			else
				self.object:set_tip_text(game.translate_string("vehicles_back_door_open"))
				if update_doors then
					self:open_back_door(true, true)
				end
			end
				---------------------------------------------
		elseif a_dist < b_dist then
			if self.left_door_open then
				self.object:set_tip_text(self.left_door_close_string)
				if update_doors then
					self:open_left_door(false, true)
				end
			else
				self.object:set_tip_text(self.left_door_open_string)
				if update_doors then
					self:open_left_door(true, true)
				end
			end
		else
			if self.right_door_open then
				self.object:set_tip_text(self.right_door_close_string)
				if update_doors then
					self:open_right_door(false, true)
				end
			else
				self.object:set_tip_text(self.right_door_open_string)
				if update_doors then
					self:open_right_door(true, true)
				end
			end
		end
--Багажник (для машин с 3й дверью, чтобы обыскать багажник надо открыть 3ю дверь----------
	elseif self.box_id > 0 and (not self.back_door or self.back_door_open) then
		--self.object:set_tip_text("Обыскать багажник (T)")
		self.object:set_tip_text(game.translate_string("vehicles_box_t"))
		if update_doors then
			if self.box_is_open then
				local menu = level.main_input_receiver()
				if menu then
					level.start_stop_menu(menu, true)
				end
				self.box_is_open = false
			else
			db.actor:open_inventory_box(level.object_by_id(self.box_id))
				self.box_is_open = true
			end
		end
--------------------------------------------------------------------------------------
	end
	return
end

function car_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	if self.st.ph_on_hit then
		xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	self.nofixonhit=true
end

local death_cars = {} --id погибших машин
function car_binder:death_callback(victim, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	death_cars[self.id] = true
	if self.box_id > 0 then
		self:BagazhnikDeath()
	end
end

function car_binder:BagazhnikDeath()
	local box = level.object_by_id(self.box_id)
	if box then
		local h = hit()
		h.type = hit.strike
		h.direction = vector():set(0,1,0)
		h.power = 0
		h.impulse = 100
		for n = 0, (box:inv_box_count() - 1) do
			local item = box:object_from_inv_box(n)
			--спасаем только квестовые и 60% прочих вещей - остальные сгорели вместе с машиной
			local section = item and item:section()
			if section and (quest_section[section] or math.random() < 0.6) then
				local cond = item:condition()
				box:drop_item(item)
				h.draftsman = item
				item:hit(h)
				--с вероятностью 40% повреждаем оставшиеся вещи (вроде, как пострадали при взрыве)
				cond = cond and (math.random() < 0.4) and item:set_condition(0.5*cond)
			 end
		end
	end
	local sim = alife()
	local sobj = sim:object(self.box_id)
	if sobj then
		sim:release(sobj, true)
	end
end

function car_binder:open_left_door(open, snd)
	local k = self.left_door_velocity --множитель скорости двери(бтр=-1, авто=1)
	if open then
		self.left_door:set_max_force_and_velocity(200, -3*k, 0)
		if opt_sound then
			snd_open:play_at_pos(self.object, self.position)
		end
		self.left_door_open = true
	else
		self.left_door:set_max_force_and_velocity(200, 3*k, 0)
		if opt_sound then
			snd_close:play_at_pos(self.object, self.position)
		end
		self.left_door_open = false
	end
end

function car_binder:open_right_door(open, snd)
	if open then
		self.right_door:set_max_force_and_velocity(200, 3, 0)
		if opt_sound then
			snd_open:play_at_pos(self.object, self.position)
		end
		self.right_door_open = true
	else
		self.right_door:set_max_force_and_velocity(200, -3, 0)
		if opt_sound then
			snd_close:play_at_pos(self.object, self.position)
		end
		self.right_door_open = false
	end
end

function car_binder:open_back_door(open, snd)
	if open then
		self.back_door:set_max_force_and_velocity(200, -3, 0)
		if opt_sound then
			snd_open:play_at_pos(self.object, self.position)
		end
		self.back_door_open = true
	else
		self.back_door:set_max_force_and_velocity(200, 3, 0)
		if opt_sound then 
			snd_close:play_at_pos(self.object, self.position)
		end
		self.back_door_open = false
	end
end

function car_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then
		return false
	end
	
	if alife():object(self.id) == nil then
		return false
	end
	return true
end

function car_binder:net_destroy()
	local st = db.storage[self.id]
	db.storage[self.id] = nil
	object_binder.net_destroy(self)
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end
end

function car_binder:net_save_relevant()
	return true
end

function car_binder:save(packet)
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	packet:w_bool(self.left_door_open)
	packet:w_bool(self.right_door_open)
	packet:w_float(self.object:get_fuel())
	packet:w_u16(self.box_id)
      --вставка для задней двери
	packet:w_bool(self.back_door_open)
end

function car_binder:load(reader)
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
	self.left_door_open = reader:r_bool()
	self.right_door_open = reader:r_bool()
	self.fuel = reader:r_float()
	if db.storage[0].pstor.CarSave == true then
		self.box_id = reader:r_u16()
		self.back_door_open = reader:r_bool()
	else
		self.box_id = reader:r_s16() --при игре со старых сохранений макс. id багажника не может быть больше 32768
		self.back_door_open = false --при игре со старых сохранений читать данные о задней двери нельзя!
	end
	self.bLoaded = true
	self.needLoad2 = nil
end

--Переход багажника в онлайн
function on_car_box_init(id, unusable)
	local obj = level.object_by_id(id)
	if obj then
		local text = unusable and "tip_car_locked" or "vehicles_box"
		obj:set_tip_text(game.translate_string(text))
	end
end

--function on_actor_update()	--можно убрать эту функцию и её вызов в bind_stalker.script
--	--теперь это определяется при апдейте ближайшей к нам машины
--	--if get_console():get_string("mm_net_player_name") == "active" then
--		--update_doors = true
--		--get_console():execute("mm_net_player_name none")
--	--end
--end

function on_actor_net_spawn() --можно убрать эту функцию и её вызов в bind_stalker.script
	--get_console():execute("bind_console mm_net_player_name active " .. opt_key)
end

local tbl_data_all = {}

function car_binder:load2()
	--читаем состояние машинки из таблицы
	local data_tbl = tbl_data_all[self.id]

	if data_tbl then
		self.left_door_open = data_tbl[1]
		self.right_door_open = data_tbl[2]
		self.fuel = data_tbl[3]
		self.box_id = data_tbl[4]
      	--вставка для задней двери
		self.back_door_open = data_tbl[5]
	end
	self.needLoad2 = nil
end


function car_binder:save2()
	--local time = time_global()

	--if self.upd_data < time then --лишнее
		--self.upd_data = time + 250
		--дополнительно сохраняем данные
		tbl_data_all[self.id] = {
		self.left_door_open,
		self.right_door_open,
		self.object:get_fuel(),
		self.box_id,
      	--вставка для задней двери
		self.back_door_open,
		}
	--end
end

function save_packet(packet)
	--Считаем количество записей в таблице и убираем данные сгоревших машин
	local i = 0
	local sim = alife()
	for id, data in pairs(tbl_data_all) do
		if death_cars[id] or not sim:object(id) then
			tbl_data_all[id] = nil
		else
			i = i + 1
		end
	end

	packet:w_u16(i)
	for id, data in pairs(tbl_data_all) do
		packet:w_u16(id)
		packet:w_bool(data[1])
		packet:w_bool(data[2])
		packet:w_float(data[3])
		packet:w_u16(data[4])
      	--вставка для задней двери
		packet:w_bool(data[5])
	end
end

function on_actor_save()
	--ставим флаг о сохранении данных
	xr_logic.pstor_store(db.actor, "CarSave", true)
end

function on_actor_load(packet)
	--Проверка флага о сохранении данных в нетпакете
	if db.storage[0].pstor.CarSave == true then
		--читаем количество записей
		local i = packet:r_u16()
		while (i > 0) do
			local id = packet:r_u16()
			local data_tbl = {
			packet:r_bool(),
			packet:r_bool(),
			packet:r_float(),
			packet:r_u16(),
		--вставка для задней двери
			packet:r_bool(),
				}
			tbl_data_all[id] = data_tbl
			i = i - 1
		end
	end
end