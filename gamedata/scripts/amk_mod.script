--[[

File:  amk_mod .script
copyright © AMK TEAM 2007-2008

добавлена  fenechka by TAG

--]]

local math_random = math.random
local math_floor = math.floor
local math_pi = math.pi
local math_sin = math.sin
local math_cos = math.cos
local math_ceil = math.ceil
local string_find = string.find
local string_sub = string.sub

local nrg,med,cnt,w
in_hide=false
local sound_obj_right,sound_obj_left,snd_volume,snd_obj_eq
local sync_done=false
local dynlasthour
zombied={}

local weather_types={
	l01_escape=1,
	l02_garbage=1,
	l03_agroprom=1,
	l03u_agr_underground=1,
	l04_darkvalley=1,
	l04u_labx18=1,
	l05_bar=1,
	l06_rostok=1,
	l07_military=1,
	l08_yantar=1,
	l08u_brainlab=1,
	l10_radar=1,
	l10u_bunker=1,
	l11_pripyat=1,
	l12_stancia=1,
	l12_stancia_2=1,
	l12u_control_monolith=1,
	l12u_sarcofag=1
}

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      QUEST_AF_STAR        **   **   **   **    **   **   **   ** 
--'*******************************************************************************
local points={
    {
        position={x=-24.2727108001709,y=-12.1660995483398,z=-100.200202941895},
        gv=0,
        lv=73868
        },
    {
        position={x=159.56,y=4.72,z=88.60},
        gv=155,
        lv=463808
        },
    {
        position={x=-4.11,y=2.90,z=108.09},
        gv=85,
        lv=272619
        }
}

function spawn_star(actor,npc,p1,p2)
    local a = points[math_random(#points)]
    local obj = alife():create("amk_af_night_star", vector():set(a.position.x,a.position.y,a.position.z), a.lv, a.gv)
	if (obj) then
		if is_debug==true then add_spot_on_map(obj.id, "red_location", "art") end
	end
	local m_where 
	if news_main then
		m_where = news_main.get_point_description("l01_escape", vector():set(a.position.x,a.position.y,a.position.z))
	else
		m_where = "Here, at the Cordon"
	end
	db.actor:give_talk_message(m_where.." likely to look for it is. Somewhere it, just say.", "ui\\ui_iconstotal", Frect():set(0,0,10,10), "simple_answer_item")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **        FIRST_RUN          **   **   **   **   **    **   **   **   ** 
--'*******************************************************************************
-- іта функция вvзvвается первой. +нлайновvе объектv недоступнv! db.actor недоступен!
function on_game_start()
	math.randomseed (device ():time_global ())
end
local tmp_intro=false
function first_run() 
	if amk.load_variable("x_first_run",true) then
		amk.g_start_timer("gg_need_sleep",0,0,6)
		amk.g_start_timer("show_news",0,0,10)
		amk.save_variable("x_first_run",false)
	end
	
	if amk.load_variable("amk_12",0)==0 then  
		amk.spawn_item("amk_zapiska",vector():set(-126.96,-28.41,-379.12),27,125181)
		amk.spawn_item("amk_zapiska",vector():set(21.6,-3.94,-18.28),1140,5991)
		amk.spawn_item("amk_zapiska",vector():set(-126.92,23.27,-36.98),1543,7083)
		sak.add_new_lcitem()
		amk.save_variable("amk_12",1)
	end
  
	if amk.load_variable("amk_13",0)==0 then
		-- pri_space_restrictor_0011  
		local obj = alife():story_object(830)
		if obj then
			alife():release(obj)
			alife():create(10776)
		end		
		amk.save_variable("amk_13",1)
	end
	
	if amk.load_variable("amk_version",0)<1400 then
		tmp_intro=true
		amk.save_variable("amk_version",1400)
		amk_anoms.pre_blow_off()
	--	amk_anoms.after_blow_on()
		
		spawn_military_btr()	
		spawn_fuel()
	end
end
--'*******************************************************************************
--'   **   **   **   **   **    **   **   **        CHECK_SPAWN          **   **   **   **   **    **   **   **  
--'*******************************************************************************
function check_spawn()
	amk_anoms.init()
	spawn_unspawned_respawners() 
	if (news_main) then
		news_main.init()
	end
	if (amk_offline_alife) then
		amk_offline_alife.init()
	end
	if (amk_corpses) then
		amk_corpses.init()
	end
	if (amk_objects) then
		amk_objects.init()
	end

	--спавним аномалии
	--initial_spawn()
	local obj = alife():story_object(6000)
	if not obj then
		alife():create(11304)
		obj = alife():story_object(6000)
	end
  
	--[[if amk.load_variable("freeplay",0)==1 then
		amk.save_variable("freeplay",2)
	elseif amk.load_variable("freeplay",0)==2 and (not has_alife_info("cit_fail_first_task")) then
		db.actor:give_info_portion("cit_fail_first_task")
		amk.save_variable("freeplay",0) -- отклічили фриплей
	end]]
--[[------------------------------- no freeplay --------------------------------]]  
if amk.load_variable("freeplay", 0) == 1 then amk.save_variable("freeplay", 0) 
end

local obj = alife():story_object(6001)
if not obj then alife():create(10862)
 end
--[[--------------------------------- lsclon -----------------------------------]]
  
	if not db.actor:has_info("val_chase_start") then
--if db.actor:has_info("info_amk_recipt_pancir") then
		local objt = alife():story_object(6002)
		if objt then
			alife():release(objt)
		end
	end
	sak.out_new_lc(9100,"info_way100a")
     sak.out_new_lc(9101,"info_way101a")
     sak.out_new_lc(9102,"info_way102a")
	sak.out_new_lc(9103,"info_way103a")
     sak.out_new_lc(9104,"info_way104a")
     sak.out_new_lc(9105,"info_way105a")
 	sak.out_new_lc(9106,"info_way106a")
     sak.out_new_lc(9107,"info_way107a")
     sak.out_new_lc(9108,"info_way108a")
 	sak.out_new_lc(9109,"info_way109a")
     sak.out_new_lc(9110,"info_way110a")
     sak.out_new_lc(9111,"info_way111a")
 	sak.out_new_lc(1008,"info_way112a")
     sak.out_new_lc(592,"info_way113a")
     sak.out_new_lc(97101,"info_way114a")
     sak.out_new_lc(11504,"info_way_arhara_peshera_cvalka")
     sak.out_new_lc(11505,"info_way_arhara_peshera_agro")
     sak.out_new_lc(11502,"info_way_arhara_cvalka_peshera")
     sak.out_new_lc(11503,"info_way_arhara_agro_peshera")
     sak.out_new_lc(97071,"info_way_arhara_td_les")
     sak.out_new_lc(97081,"info_way_arhara_labirint_peshera")
     sak.out_new_lc(97021,"info_way_arhara_peshera_labirint")
     sak.out_new_lc(11512,"info_way_arhara_labirint_yantar")
     sak.out_new_lc(11515,"info_way_arhara_yantar_labirint")
     sak.out_new_lc(11511,"info_way_arhara_labirint_earth")
     sak.out_new_lc(97041,"info_way_arhara_atp_pripyat")
     sak.out_new_lc(97091,"info_way_arhara_atp_military")
     sak.out_new_lc(97092,"info_way_arhara_atp_kordon")
     sak.out_new_lc(97093,"info_way_arhara_atp_svalka")
     sak.out_new_lc(97100,"info_way_arhara_pripyt_village") 
     sak.out_new_lc(11514,"info_way_arhara_military_earth")
     sak.out_new_lc(11513,"info_way_arhara_td_earth")
     sak.out_new_lc(12506,"info_way_arhara_svalka_earth")
     sak.out_new_lc(11510,"info_way_arhara_earth_labirint")
     sak.out_new_lc(97094,"info_way_arhara_radar_warlab")
     sak.out_new_lc(97095,"info_way_arhara_warlab_brainlab")
     sak.out_new_lc(97097,"info_way_arhara_warlab_skladu")
     sak.out_new_lc(97098,"info_way_arhara_x18_warlab")
     sak.out_new_lc(14002,"info_way_arhara_kordon_boloto")
     sak.out_new_lc(14091,"info_way_arhara_radar_forest")
     sak.out_new_lc(97099,"info_way_arhara_chaes2_atp")
     sak.out_new_lc(11529,"info_way_arhara_village_limansk")
     sak.out_new_lc(11531,"info_way_arhara_village_hospital")
     sak.out_new_lc(97103,"info_way_arhara_chaes_generator")
     sak.out_new_lc(97104,"info_way_arhara_hospital_agroprom")
     sak.out_new_lc(97105,"info_way_arhara_agroprom_marsh1")
     sak.out_new_lc(97001,"info_way_arhara_bar_atp")
     sak.out_new_lc(97106,"info_way_arhara_gener_pripyat")
     sak.out_new_lc(97102,"info_way_arhara_chaes2_chaes")
     sak.out_new_lc(11521,"info_way_arhara_gener_hospital")
     sak.out_new_lc(97096,"info_way_arhara_warlab_generators")
     sak.out_new_lc(97107,"info_way_arhara_limansk_generators")
     sak.out_new_lc(97108,"info_way_arhara_forest_warlab")
     sak.out_new_lc(97109,"info_way_arhara_dcity_limansk")
     sak.out_new_lc(97110,"info_way_arhara_dead_city_atp")
     sak.out_new_lc(97111,"info_way_arhara_dcity_rostok")
     sak.out_new_lc(97112,"info_way_arhara_atp_dead_city")
     sak.out_new_lc(97113,"info_way_arhara_dcity_zaton")
     sak.out_new_lc(97114,"info_way_arhara_lima_dcity")
	
	--level_changers section
	local lname = level.name()
	local sname = amk.load_variable("level_on_save","")

    if (amk_offline_alife) then
		amk_offline_alife.update_npc_tables()
	end
	if (amk_corpses) then
		amk_corpses.update_all_corpses()
	end
	if lname ~= sname and amk_objects then 
		amk_objects.update() 
	end
	
	-- іададим сооб ения при переходе на уровень.
	if news_main then
		if (lname ~= sname and sname ~= "") then
			if (news_main.isIsolatedLevel(lname)== true and news_main.isIsolatedLevel(sname) == false) then -- Tпустились под землі.
				news_main.on_disconnect()
			elseif (news_main.isIsolatedLevel(lname) == false and news_main.isIsolatedLevel(sname) == true) then -- Tvбрались из-под земли.
				news_main.on_connect()
			end
			if (amk_offline_alife) then
				amk_offline_alife.update_trade()
		end
	end
  end

	if lname=="l01_escape" and sname=="l04_darkvalley" then
		local obj = alife():story_object(6002)
		if not obj then
			alife():create(2825)
		end
	end
  
	if sname=="l01_escape" and lname=="l04_darkvalley" then
		db.actor:set_actor_position(vector():set(-44.38, 0.43, -541.47))
	end
  
	--[[spots section
	obj = alife():story_object(6001)
	if obj then
		level.map_add_object_spot(obj.id, "level_changer", "to_pripyat")
	end
	obj = alife():story_object(6002)
	if obj then
		level.map_add_object_spot(obj.id, "level_changer", "to_darkvalley")
	end]]
	if weather_types[lname]==0 then
		w=amk.load_variable("dynweather",nil) or level.get_weather() 
	else
		w=level.get_weather() 
	end
	if amk.load_variable("blowout",0)>0 then amk.save_variable("weather",level.get_weather()) end
	level.set_weather("amk_for_blow",true)
	game.start_tutorial("restore_sun")

	if amk.load_variable("blowout",0)>0 and amk.load_variable("blowout",0)<4 then
		local bt=blowout_type()
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		if bt<1 then
			level.set_weather("amk_for_blow",true)
			level.add_pp_effector("vibros.ppe", 2001, true)
			blowout_psy_sound("start")
		end
	end

	if db.actor and not has_alife_info("game_over") then
		local flame = db.actor:object("wpn_flame")
		if flame then
			db.actor:iterate_inventory(
				function(dummy,item)
					if item:section()=="wpn_flame" then
						alife():release(alife():object(item:id()))
					end
				end
				,db.actor)
			
		end
	end
end

--[[------------------------------- no freeplay --------------------------------]]
function restore_sun()
  --update_anoms()
	--amk_anoms.init()
	local lname = level.name()
	local sname = amk.load_variable("level_on_save","")
  amk.save_variable("level_on_save",lname)
	if amk.load_variable("blowout",0) == 0 then
		level.set_weather(w,true)
	end
	if amk.load_variable("blow_started", 0) == 0 then
		start_blow_timer() amk.save_variable("blow_started", 1)
	end
	if tmp_intro then
		tmp_intro = false
	end
	-- Tид ++ после смерти в его собственной броне
	local npc_SP = db.actor
	local outfit = npc_SP:item_in_slot(6)
	if outfit ~= nil then
		local outfit_name = outfit:section()
		local outfit_cond = outfit:condition()
		alife():release(alife():object(outfit:id()), true)
		outfit = alife():create(outfit_name, npc_SP:position(), npc_SP:level_vertex_id(), npc_SP:game_vertex_id(), npc_SP:id())
		if outfit ~= nil then
			amk.start_timer("outfit_cond", 1, {outfit.id, math.min(math_ceil(outfit_cond * 100), 100)})
		end
	end
end
  
--[[	local lname = level.name()
	local sname = amk.load_variable("level_on_save","")
  amk.save_variable("level_on_save",lname)
  if sname=="l12_stancia_2" and lname=="l11_pripyat" then
    sleep_manager.main(1)
  end
	
	if amk.load_variable("blow_started",0)==0 then
		start_blow_timer()
		amk.save_variable("blow_started",1)
	end
	if tmp_intro then
		--amk.send_tip(game.translate_string("amk_welcome_msg"),game.translate_string("amk_welcome_title"),nil,35,"monolith")
		tmp_intro=false
	end
	sync_done=true	
end]]

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **         FREEPLAY           **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function freeplay()
amk.save_variable("freeplay",1)
end
--[[--------------------------------- lsclon -----------------------------------]]

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      NEWS_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function show_news()
	if (news_main and news_main.on_news) then
		news_main.on_news()
	end

	local ln = level.name()
	if (ln == "l03u_agr_underground" or ln == "l04u_labx18" or ln == "l08u_brainlab" or ln == "l10u_bunker") then
		-- іадиомолчание
	else	
		if math_random()>0.2 then
			if math_random()>0.875 then
				if amk_dolg and math_random()>0.5 then
					local dolg_news=amk_dolg.get_strings()
					db.actor:give_game_news(dolg_news, "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
				elseif amk_freedom then
					local freedom_news=amk_freedom.get_strings()
					db.actor:give_game_news(freedom_news, "ui\\ui_iconsTotal", Frect():set(498,94,83,47), 0, 15000)
				end
			else
				if math_random()>0.57 then
				--amk.send_tip(when.." "..where.." "..text.." "..mat,name.." "..sname,nil,15,"gen_info")
				else
				--amk.send_tip(name.." "..sname..". "..dead..". "..reason,game.translate_string("stalker_died"),nil,10,"death")
				end
			end 
		else
			if amk_uniq_news_lists and math_random()>0.5 then
				local uniq=amk_uniq_news_lists.get_strings()
				local name,sname = amk_names_lists.get_strings()
				amk.send_tip(uniq,name.." "..sname,nil,15,"uniq")
			elseif amk_modders then
				local mod_news=amk_modders.get_strings()
				db.actor:give_game_news(mod_news, "ui\\ui_iconsTotal", Frect():set(498,47,83,47), 0, 15000)
			end
		end
	end
	amk.g_start_timer("show_news",0,0,math_random(40,80))
end


--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      SLEEP_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function reduce_need_sleep(time)
	local tmp=amk.load_variable("gg_need_sleep",0)
	tmp=tmp-time*120
	if tmp<0 then tmp=0 end
	amk.save_variable("gg_need_sleep_nrg",0)
	amk.save_variable("block_sleep_menu",0)
	amk.save_variable("gg_need_sleep",tmp)
	test_sleep_pp()
end

function test_for_need_sleep()
	if sleep_manager.is_sleep_active() == false then 
		amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)+1) 
		test_sleep_pp()
	end
	amk.g_start_timer("gg_need_sleep",0,0,6)
end

function test_sleep_pp()
	local tmp=amk.load_variable("gg_need_sleep",0)
	if tmp>360 then
		sleep_manager.main(5+amk.load_variable("gg_need_sleep_nrg",0))
	end
	if tmp>300 then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, 5.0)  
		-- DMX MOD on
		local snd_obj = xr_sound.get_safe_sound_object([[actor\sleepy]])
        snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
        local cs = get_hud():GetCustomStatic("sleep_static")
        if cs == nil then get_hud():AddCustomStatic("sleep_static",true) end
	    -- DMX MOD off
	end
	if tmp<=300 then
		level.remove_pp_effector(999)
		get_hud():RemoveCustomStatic("sleep_static") -- DMX MOD
	end
end

function check_sleep_item(obj)
	local section = obj:section()
	local stype=nil
	
	if section=="energy_drink" then
		stype="nrg"
	--'elseif (section=="medkit" or section=="medkit_army" or section=="medkit_scientic") then
	--'	stype="med"
	elseif section=="matras" then
		stype="matras"
	--elseif section=="repbox_s1" then
		--amk.start_timer("sleep_repbox",0.1,amk.pack_array_to_string( {obj:id(), obj:condition(), 1} ))
	--elseif section=="repbox_s2" then
		--amk.start_timer("sleep_repbox",0.1,amk.pack_array_to_string( {obj:id(), obj:condition(), 2} ))
	elseif section=="treasure_item" then
		stype="tr_item"
--[[elseif string_sub(section,1,9) == "fake_wpn_" then
		amk.start_timer("sleep_fake_wpn",0.1, {obj:id(), section} )]]
	end
 
	if stype~=nil then
		amk.start_timer("sleep_"..stype,0.1,obj:id())
	end
end

function test_for_need_sleep_nrg(oid)
	if alife():object(oid)==nil then
		local n=amk.load_variable("gg_need_sleep_nrg",0)
		if n<3 then
			amk.save_variable("gg_need_sleep_nrg",n+1)
			amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)-30+n*10) 
			test_sleep_pp()
		end  
		amk.g_start_timer("block_sleep_menu",0,1,0)
		amk.save_variable("block_sleep_menu",1)
	end
end
--[[
function test_for_need_sleep_med(oid)
	if alife():object(oid)==nil then
		amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)+5) 
		test_sleep_pp()
	end
end
]]--
function test_for_need_sleep_matras(oid)
	if alife():object(oid)==nil then
		local enemy=false
		local obj
		local level_object_by_id = level.object_by_id
		local actor = db.actor
		local actorPos = actor:position()
		for npcId, npc in pairs(db.storage) do
			obj = level_object_by_id(npcId)
			if obj then
				if (( IAmAStalker[obj:clsid()] and amk.get_npc_relation(obj,actor)=="enemy" ) or IAmAMonster[obj:clsid()])
					and obj:position():distance_to(actorPos) < 40 and obj:see(actor) then
					enemy=true
					break
				end
			end
		end
		if enemy==true then
			amk.send_tip(game.translate_string("not_need_sleep_enemy"),"Sleep",nil,10,"inv_icon")
		else
			if amk.load_variable("blowout",-1)>-1 and amk.load_variable("blowout",-1)<5 then
				amk.send_tip(game.translate_string("blowout_not_sleep"),"Sleep",nil,10,"inv_icon")
			else
				if db.actor:has_info("horror_time_begin") and db.actor:dont_has_info("horror_fail") then
					amk.send_tip(game.translate_string("not_need_sleep_in_hell"),"Sleep",nil,10,"inv_icon")
				else
					if amk.load_variable("block_sleep_menu",0)==0 then
						--if amk.load_variable("gg_need_sleep",0)>10 then
	-- Небольшая правка по сну - теперь Меченый всегда может спать, кроме как при: Выбросе, ЧУ, врагах рядом и если употребил энергетик
	--if amk.load_variable("gg_need_sleep",0)>0 then
							local spwn=ui_cheat.cheat(get_hud())
							level.start_stop_menu(spwn,true)
	--else
	--amk.send_tip(game.translate_string("not_need_sleep"),nil,nil,5)
	--end
					else
						amk.send_tip(game.translate_string("not_need_sleep_nrg"),"Sleep",nil,10,"inv_icon")
					end
				end
			end
		 end
	    amk.spawn_item_in_inv("matras")
	end
end

function test_for_need_sleep_tr_item(oid)
	if alife():object(oid)==nil then
	    if news_main then
	      news_main.create_treasurebox()
	    end
	end
end


--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      RADAR_FIX         **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function check_radar_off()
	if (level.name() == "l10_radar") then
		if not has_alife_info("bar_deactivate_radar_done") then
			local pos = db.actor:position()
			if pos.z>65 and pos.x>350 and pos.x<410 then
				if amk.load_variable("radar_fix",0)==0 then
					level.add_pp_effector("fire_hit.ppe", 1523, true)
					level.set_pp_effector_factor(1523, 0.5)
					amk.save_variable("radar_fix",1)
					amk.start_timer("radar_fix",5)
				end
			end
		end
	end
end

function radar_fix()
	level.remove_pp_effector(1523)
	local pos = db.actor:position()
	if pos.z>65 and pos.x>350 and pos.x<410 then
		db.actor:kill(db.actor)
	end
	amk.del_variable("radar_fix")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      ITEM_TRANSFORM         **   **   **   **   **    **   **   **
--'*******************************************************************************

local tramsform_items = {
	["item1"] = {info = "info_portion_1", result = {"item_out_1", "item_out_2", "item_out_3", "item_out_4"}},
	["item2"] = {info = "info_portion_2", result = {"item_out_2"}},
	["kaktus_izomorf"] = {info = "kaktus_izo_resept", result = {"bloodsucker_effector", "af_spirit_4", "af_arhara_globus", "mutant_krovosos_cocoon"}},
	["izom_globus"] = {info = "kaktus_izo_resept", result = {"bomba_mina_n", "af_babka_3", "af_spirit_4", "device_teleport"}},
	["psevdokristall"] = {info = "kaktus_izo_resept", result = {"af_spirit_3", "af_babka_2", "wpn_m4", "device_teleport"}},
	["izomorf_plastilin"] = {info = "molniya_plastilin_ok_start", result = {"korobka_sigars", "ammo_5.45x39_izomorf", "ammo_7.62x54_izomorf", "ammo_zhekan_izomorf"}},
     ["korobka_sigars"] = {info = "kluch_poluchen", result = {"9x39_izomorf", "ammo_9x39_izomorf", "ammo_9x39_izomorf", "ammo_9x39_izomorf"}}
}

-- проверка на упавший предмет/артефакт
function check_for_item_drop(obj)
	local obj_sect = obj:section()
	local actor = db.actor
	
	if tramsform_items[obj_sect] and actor:has_info(tramsform_items[obj_sect].info) then
		local lv = obj:level_vertex_id()
		local gv = obj:game_vertex_id()
		if gv == 65535 then gv = actor:game_vertex_id() end
		if gv == 65535 then return end -- похоже, что рядом нету вертекса
		
		-- предмет подходит - отправляем его на экспертизу
		-- узнаем не съели ли его или вvложили в нvчку
		local tbl	= {}
		tbl.obj_id	= obj:id()
		tbl.lv		= lv
		tbl.gv		= gv
		amk.start_timer("timer_drop_obj_transform", 0.2, tbl)
	end
end

function item_transform(obj_id, lv, gv)
    local obj = level.object_by_id(obj_id)
    if obj then
        level.add_pp_effector("teleport.ppe", 1524, false)
        local result = tramsform_items[obj:section()].result
        local position = obj:position()
        for i = 1, #result do
            amk.spawn_item(result[i], position, gv, lv)
        end
        amk.remove_item(obj)
    end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      AF_TRANSFORM         **   **   **   **   **    **   **   **
--'*******************************************************************************
local cur_level=nil
local havegoodart=false

-- список компонентов
-- желательно добавлять в алфавитном порядке
local afs={
["af_ameba_mica"] = true,
["af_ameba_slime"] = true,
["af_ameba_slug"] = true,
["af_armor_1"] = true,
["af_armor_2"] = true,
["af_armor_3"] = true,
["af_babka_1"] = true,
["af_babka_2"] = true,
["af_babka_3"] = true,
["af_blood"] = true,
["af_cristall"] = true,
["af_cristall_flower"] = true,
["af_cry_1"] = true,
["af_cry_2"] = true,
["af_dik_1"] = true,
["af_dik_2"] = true,
["af_dik_3"] = true,
["af_drops"] = true,
["af_dummy_battery"] = true,
["af_dummy_battery_red"] = true,
["af_dummy_dummy"] = true,
["af_dummy_glassbeads"] = true,
["af_dummy_pellicle"] = true,
["af_dummy_pellicle_red"] = true,
["af_dummy_spring"] = true,
["af_dummy_spring_red"] = true,
["af_electra_flash"] = true,
["af_electra_moonlight"] = true,
["af_electra_sparkler"] = true,
["af_fireball"] = true,
["af_fuzz_kolobok"] = true,
["af_gold_fish"] = true,
["af_gravi"] = true,
["af_kamen_udachy"] = true,
["af_kol_1"] = true,
["af_kol_2"] = true,
["af_kol_3"] = true,
["af_medusa"] = true,
["af_mincer_meat"] = true,
["af_night_star"] = true,
["af_part_monolit2"] = true,
["af_pudd_1"] = true,
["af_pudd_2"] = true,
["af_pudd_3"] = true,
["af_rusty_kristall"] = true,
["af_rusty_sea-urchin"] = true,
["af_rusty_thorn"] = true,
["af_simbion"] = true,
["af_soul"] = true,
["af_spirit_1"] = true,
["af_spirit_2"] = true,
["af_spirit_3"] = true,
["af_vyvert"] = true,
["bandage"] = true,
["bezoar"] = true,
["bread"] = true,
["conserva"] = true,
["energy_drink"] = true,
["izomorf_kompas"] = true,
["kolbasa"] = true,
["mutant_boar_leg"] = true,
["mutant_dog_tail"] = true,
["mutant_face_tushkano"] = true,
["mutant_flesh_eye"] = true,
["mutant_krovosos_jaw"] = true,
["mutant_psevdodog_tail"] = true,
["mutant_snork_leg"] = true,
["mutant_zombie_teeth"] = true,
["sigaret"] = true,
["vodka"] = true
}

-- проверка на упавший предмет/артефакт
function check_for_af_drop(obj)
	local obj_sect = obj:section()
	
	-- проверка не один ли это из компонентов
	if afs[obj_sect] == true then
		local anom_id,anom_pos,anom_radius,dist = amk_anoms.get_nearest_anomaly(obj)
		
		if anom_id and anom_radius - dist > -2 then
			--local anom_sect = level.object_by_id(anom_id):section()
			--local obj_pos = obj:position()
			local lv = level.object_by_id(anom_id):level_vertex_id()
			local gv = level.object_by_id(anom_id):game_vertex_id()
			if gv == 65535 then gv = obj:game_vertex_id() end
			if gv == 65535 then gv = db.actor:game_vertex_id() end
			if gv == 65535 then return end -- похоже, что рядом нету вертекса
			
			-- предмет подходит - отправляем его на экспертизу
			-- узнаем не съели ли его или вvложили в нvчку
			local tbl		= {}
			tbl.obj_id		= obj:id()
			tbl.anom_id		= anom_id
			tbl.anom_radius	= anom_radius
			tbl.lv			= lv
			tbl.gv			= gv
			amk.start_timer("timer_drop_obj_varka", 0.2, tbl)

			-- перенесено в amk.script
			--check_af_transform(obj, obj_sect, obj_pos, anom_id, anom_sect, anom_pos, anom_radius, lv, gv)
		end
	end
end

-- проверка: является ли компонентом для варки
-- параметр - название секции
function is_komponent(sec)
     return (afs[sec] ~= nil)
end

-- аномали "узнаітся" по части названия!
-- komp - компонентv
-- удача v_udachi + вvрождение в булvжник v_virogd <= 100 !!!
-- отторжение v_ottorg = 100 - (v_udachi + v_virogd) посему и не нужно прописvвать в таблицу
-- cel - цель (может бvть одновременно несколько целей)
-- info - инфопорция, которая будет вvдана после L-L+=+Ј варки
-- virogd - во что вvрождается (может бvть одновременно несколько вvрождений)
-- vremya = {дни, часv, минутv} - время варки/мутации
-- remove_anomaly - удалить ли аномалиі (можно комбинировать вместе с варкой/мутацией)
-- not_for_mutator - рецепт никогда не попадїт в трансмутатор
-- ne_ugadat -  рецепт не угадvвается в трансмутаторе, но будет в нїм показан при наличии поршня
local anom_recept_komp = {
	-- умолчание, если нет даннvх ближе к рецепту
	default = {
		cel = {},
		v_udachi = 100,
		v_virogd = 0,
		virogd = {["af_buliz"]=true},
		vremya = {0,0,5},
		remove_anomaly = false
	},
	
	anomalii = {
		["_zharka"] = {
			-- умолчание, если нет даннvх ближе к рецепту,
			-- которое может переопределятья в рецепте
			name = "Burner",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалииі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["info_artmod_electra_flash_zharka"] = {
					komp = {["af_medusa"]=true,["af_rusty_thorn"]=true,["af_vyvert"]=true,["vodka"]=true},
					cel = {["af_electra_flash"]=true}
				},
				["info_artmod_ameba_slime_zharka"] = {
					komp = {["af_medusa"]=true,["af_blood"]=true,["kolbasa"]=true,["mutant_dog_tail"]=true},
					cel = {["af_ameba_slime"]=true}
				},
				["info_artmod_gravi_zharka"] = {
					komp = {["af_medusa"]=true,["af_blood"]=true,["bandage"]=true,["conserva"]=true},
					cel = {["af_gravi"]=true}
				},
				["info_artmod_night_star_zharka"] = {
					komp = {["af_rusty_kristall"]=true,["af_vyvert"]=true,["af_electra_flash"]=true,["mutant_snork_leg"]=true},
					cel = {["af_night_star"]=true}
				},
				["info_artmod_electra_moonlight_zharka"] = {
					komp = {["af_gravi"]=true,["af_medusa"]=true,["af_electra_flash"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_electra_moonlight"]=true}
				},
				["info_artmod_dummy_battery_zharka"] = {
					komp = {["af_electra_flash"]=true,["af_ameba_mica"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_dummy_battery"]=true}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_drops"] = {
					komp = {["af_soul"]=true},
					cel = {["af_spirit_1"]=true},
					vremya = {0,4,0}
				},
				["info_artmod_gusenica"] = {
					komp = {["bezoar"]=true},
					cel = {["af_caterpillar"]=true},
					vremya = {0,0,5},
					v_udachi = 75,
					v_virogd = 25
				},
				["info_artmod_probabka_burera"] = {
					komp = {["af_babka_3"]=true},
					cel = {["af_babka_4"]=true},
					vremya = {0,0,5},
					v_udachi = 75,
					v_virogd = 25
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_fire"] = {
					komp = {["af_spirit_1"]=true},
					cel = {["af_spirit_2"]=true},
					vremya = {0,6,0}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_cristal"] = {
					komp = {["af_spirit_2"]=true},
					cel = {["af_spirit_3"]=true},
					vremya = {0,10,0}
				},
				["info_amk_recipt_tears_fire"] = {
					komp = {["af_cry_1"]=true},
					cel = {["af_cry_2"]=true},
					vremya = {0,5,0}
				},
				["info_amk_recipt_dikoobraz"] = {
					komp = {["af_rusty_sea-urchin"]=true},
					cel = {["af_dik_1"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_giant_small_brother"] = {
					komp = {["af_kol_3"]=true},
					cel = {["af_kol_4"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_controller_skalp"] = {
					komp = {["af_armor_3"]=true},
					cel = {["af_armor_4"]=true},
					vremya = {0,6,0}
				}
			}
		},
		
		["_galant"] = {
			-- умолчание, если нет данных ближе к рецепту
			name = "Electro",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_battery"] = { -- артефакт удалит аномалииі без результатов варки/мутации
					komp = {["af_dummy_battery_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_fireball_galant"] = {
					komp = {["af_blood"]=true,["af_medusa"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_fireball"]=true}
				},
				["info_artmod_cristall_flower_galant"] = {
					komp = {["af_vyvert"]=true,["af_rusty_thorn"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_cristall_flower"]=true}
				},
				["info_artmod_ameba_mica_galant"] = {
					komp = {["af_ameba_slime"]=true,["af_rusty_thorn"]=true,["af_medusa"]=true,["kolbasa"]=true},
					cel = {["af_ameba_mica"]=true}
				},
				["info_artmod_electra_moonlight_galant"] = {
					komp = {["af_gravi"]=true,["af_blood"]=true,["af_fireball"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_soul"]=true}
				},
				["info_artmod_gold_fish_galant"] = {
					komp = {["af_medusa"]=true,["af_rusty_thorn"]=true,["af_cristall_flower"]=true,["mutant_flesh_eye"]=true},
					cel = {["af_gold_fish"]=true}
				},
				["info_artmod_dummy_spring_galant"] = {
					komp = {["af_cristall_flower"]=true,["af_cristall"]=true,["mutant_psevdodog_tail"]=true,["conserva"]=true},
					cel = {["af_dummy_spring"]=true}
				},
				["info_artmod_medusa_galant"] = {
					komp = {["mutant_face_tushkano"]=true,["bandage"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_medusa"]=true}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_bengal"] = {
					komp = {["af_spirit_3"]=true},
					cel = {["af_spirit_4"]=true},
					vremya = {0,1,0}
				},
				["info_amk_recipt_tears_electra"] = {
					komp = {["af_drops"]=true},
					cel = {["af_cry_1"]=true},
					vremya = {0,5,0}
				},
				["info_amk_recipt_grandmother_glassbeards"] = {
					komp = {["af_dummy_glassbeads"]=true},
					cel = {["af_babka_1"]=true},
					vremya = {0,5,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_fire"] = {
					komp = {["af_dummy_dummy"]=true},
					cel = {["af_pudd_1"]=true},
					vremya = {0,3,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_bright"] = {
					komp = {["af_pudd_1"]=true},
					cel = {["af_pudd_2"]=true},
					vremya = {0,6,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_moon"] = {
					komp = {["af_pudd_2"]=true},
					cel = {["af_pudd_3"]=true},
					vremya = {0,8,0}
				},
				["info_amk_recipt_electra_dikoobraz"] = {
					komp = {["af_dik_1"]=true},
					cel = {["af_dik_2"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_buzz"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "Fruit punch",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["info_artmod_rusty_kristall_buzz"] = {
					komp = {["af_electra_sparkler"]=true,["af_medusa"]=true,["af_drops"]=true,["bread"]=true},
					cel = {["af_rusty_kristall"]=true}
				},
				["info_artmod_rusty_thorn_buzz"] = {
					komp = {["af_blood"]=true,["bandage"]=true,["bread"]=true,["mutant_dog_tail"]=true},
					cel = {["af_rusty_thorn"]=true}
				},
				["info_artmod_fireball_buzz"] = {
					komp = {["af_rusty_thorn"]=true,["af_vyvert"]=true,["mutant_snork_leg"]=true,["bread"]=true},
					cel = {["af_fireball"]=true}
				},
				["info_artmod_night_star_buzz"] = {
					komp = {["af_gravi"]=true,["af_blood"]=true,["af_electra_flash"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_gold_fish"]=true}
				},
				["info_artmod_fuzz_kolobok_buzz"] = {
					komp = {["af_night_star"]=true,["af_soul"]=true,["af_electra_moonlight"]=true,["af_rusty_sea-urchin"]=true},
					cel = {["af_fuzz_kolobok"]=true}
				},
				["info_artmod_vyvert_buzz"] = {
					komp = {["mutant_face_tushkano"]=true,["bandage"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_vyvert"]=true}
				},
				["info_amk_recipt_tears_chimaera"] = {
					komp = {["af_cry_2"]=true},
					cel = {["af_cry_3"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_pra_grandmother_glassbeards"] = {
					komp = {["af_babka_1"]=true},
					cel = {["af_babka_2"]=true},
					vremya = {0,3,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_puding"] = {
					komp = {["af_pudd_3"]=true},
					cel = {["af_pudd_4"]=true},
					vremya = {0,12,0}
				},
				["info_amk_recipt_sopl_dikoobraz"] = {
					komp = {["af_dik_2"]=true},
					cel = {["af_dik_3"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_almaz_kolobok"] = {
					komp = {["af_kol_2"]=true},
					cel = {["af_kol_3"]=true},
					vremya = {0,8,0}
				},
				["info_amk_recipt_pancir"] = {
					komp = {["af_armor_2"]=true},
					cel = {["af_armor_3"]=true},
					vremya = {0,2,0}
				},
				["tretiy_kod_dost_start"] = {
					komp = {["af_simbion"]=true},
					cel = {["af_arhara_globus"]=true},
					vremya = {0,0,10},
					v_udachi = 75,
					v_virogd = 25
				},
				["info_amk_recipt_simbion"] = {
					komp = {["af_medusa"]=true,["af_drops"]=true,["af_blood"]=true,["af_rusty_thorn"]=true},
					cel = {["af_simbion"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_fountain"] = {
			name = "\"Fountain\"",
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["info_artmod_cristall_buzz"] = {
					komp = {["af_cristall_flower"]=true,["af_medusa"]=true,["af_fireball"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_cristall"]=true}
				}
			}
		},
		
		["_mincer"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "Whirligig",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_spring"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_spring_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_cristall_flower_mincer"] = {
					komp = {["af_blood"]=true,["af_medusa"]=true,["bandage"]=true,["conserva"]=true},
					cel = {["af_cristall_flower"]=true}
				},
				["info_artmod_drops_mincer"] = {
					komp = {["af_vyvert"]=true,["bandage"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_drops"]=true}
				},
				["info_artmod_rusty_kristall_mincer"] = {
					komp = {["af_electra_sparkler"]=true,["af_medusa"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_rusty_kristall"]=true}
				},
				["info_artmod_electra_moonlight_mincer"] = {
					komp = {["af_fireball"]=true,["af_blood"]=true,["af_ameba_slug"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_electra_moonlight"]=true}
				},
				["info_artmod_ameba_slug_mincer"] = {
					komp = {["af_electra_flash"]=true,["af_vyvert"]=true,["af_fireball"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_ameba_mica"]=true}
				},
				["info_artmod_dummy_glassbeads_mincer"] = {
					komp = {["af_ameba_mica"]=true,["af_rusty_sea-urchin"]=true,["af_gold_fish"]=true,["af_night_star"]=true},
					cel = {["af_dummy_glassbeads"]=true}
				},
				["info_amk_recipt_burer_grandmother_glassbeards"] = {
					komp = {["af_babka_2"]=true},
					cel = {["af_babka_3"]=true},
					vremya = {0,0,10}
				},
				["info_amk_recipt_titan_kolobok"] = {
					komp = {["af_kol_1"]=true},
					cel = {["af_kol_2"]=true},
					vremya = {0,5,0}
				},
				["we_ne_chmuri"] = {
					komp = {["af_kamen_udachy"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					not_for_mutator = true,
					info = "spawn_hospit_live"
				},
				["mozno_varit"] = {
					komp = {["af_part_monolit2"]=true},
					cel = {["af_kamen_udachy"]=true},
					vremya = {0,0,1},
					not_for_mutator = true,
					info = "spawn_kamen_udachy"
				},
				["info_amk_recipt_cheshya"] = {
					komp = {["af_armor_1"]=true},
					cel = {["af_armor_2"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_mosquito_bald"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Trampoline\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_pellicle"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_pellicle_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_mincer_meat_mosquito_bald"] = {
					komp = {["af_vyvert"]=true,["af_blood"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_mincer_meat"]=true}
				},
				["info_artmod_electra_sparkler_mosquito_bald"] = {
					komp = {["af_drops"]=true,["bandage"]=true,["kolbasa"]=true,["mutant_dog_tail"]=true},
					cel = {["af_electra_sparkler"]=true}
				},
				["info_artmod_ameba_slug_mosquito_bald"] = {
					komp = {["af_medusa"]=true,["af_drops"]=true,["bandage"]=true,["vodka"]=true},
					cel = {["af_ameba_slug"]=true}
				},
				["info_artmod_cristall_mosquito_bald"] = {
					komp = {["af_mincer_meat"]=true,["af_vyvert"]=true,["af_fireball"]=true,["mutant_flesh_eye"]=true},
					cel = {["af_cristall"]=true}
				},
				["info_artmod_rusty_sea-urchin_mosquito_bald"] = {
					komp = {["af_ameba_slime"]=true,["af_blood"]=true,["af_rusty_kristall"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_rusty_sea-urchin"]=true}
				},
				["info_artmod_dummy_dummy_mosquito_bald"] = {
					komp = {["af_ameba_mica"]=true,["af_cristall"]=true,["af_mincer_meat"]=true,["af_night_star"]=true},
					cel = {["af_dummy_dummy"]=true}
				},
				["info_amk_recipt_stone_dikoobraz"] = {
					komp = {["af_dik_3"]=true},
					cel = {["af_dik_4"]=true},
					vremya = {0,9,0}
				},
				["info_amk_recipt_steel_kolobok"] = {
					komp = {["af_fuzz_kolobok"]=true},
					cel = {["af_kol_1"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_shkura"] = {
					komp = {["af_dummy_pellicle"]=true},
					cel = {["af_armor_1"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_gravi_zone"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "Vortex",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_battery"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_battery_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_ameba_slug_gravi_zone"] = {
					komp = {["af_vyvert"]=true,["af_medusa"]=true,["kolbasa"]=true,["mutant_dog_tail"]=true},
					cel = {["af_ameba_slug"]=true}
				},
				["info_artmod_ameba_slime_gravi_zone"] = {
					komp = {["af_medusa"]=true,["bandage"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_ameba_slime"]=true}
				},
				["info_artmod_electra_flash_gravi_zone"] = {
					komp = {["af_vyvert"]=true,["af_blood"]=true,["mutant_dog_tail"]=true,["vodka"]=true},
					cel = {["af_electra_flash"]=true}
				},
				["info_artmod_night_star_gravi_zone"] = {
					komp = {["af_rusty_thorn"]=true,["af_medusa"]=true,["af_rusty_kristall"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_night_star"]=true}
				},
				["iinfo_artmod_soul_gravi_zone"] = {
					komp = {["af_electra_flash"]=true,["af_cristall_flower"]=true,["af_ameba_slug"]=true,["mutant_snork_leg"]=true},
					cel = {["af_soul"]=true}
				},
				["info_artmod_dummy_pellicle_gravi_zone"] = {
					komp = {["af_ameba_mica"]=true,["af_cristall"]=true,["af_gold_fish"]=true,["af_soul"]=true},
					cel = {["af_dummy_pellicle"]=true}
				}
			}
		},
		
		["_ice"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Freezer\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["life_heart_final"] = {
					komp = {["af_dummy_dummy"]=true,["af_rusty_sea-urchin"]=true,["af_gold_fish"]=true,["af_night_star"]=true},
					cel = {["af_life_heart"]=true}
				},
				["info_red_battery"] = {
					komp = {["af_dummy_battery"]=true},
					cel = {["af_dummy_battery_red"]=true}
				},
				["info_red_spring"] = {
					komp = {["af_dummy_spring"]=true},
					cel = {["af_dummy_spring_red"]=true}
				},
				["info_red_pellicle"] = {
					komp = {["af_dummy_pellicle"]=true},
					cel = {["af_dummy_pellicle_red"]=true}
				}
			}
		},
		["_ogon"] = {
			name = "\"Heat\""
		},

		["_sphere"] = {
		name = "\"Bubble\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				}
			}				
		},

		["_zavesa"] = {
		name = "\"Tornado\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
               },
				["fima_mulo_nayti_done"] = {
					komp = {["mutant_zombie_teeth"]=true,["kolbasa"]=true},
					cel = {["rudiment_big"]=true},
					v_udachi = 50,
					v_virogd = 50,
					not_for_mutator = true
				}
			}				
		},

		["_smallrain"] = {
		name = "\"Patchy Fog\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				}
			}				
		},

		["_monolith"] = {
			name = "\"Radon cloud\""
		},
		["_no_gravity"] = {
			name = "Elevator"
		}
	}
}

-- возвра ает значение, возможно из умолчаний
function get_af_transform_param(name, recept, recepti)
	local result
	--get_console():execute("load ~#I#:"..string.format(name.." имя"))
	if recept[name] ~= nil then
		result = recept[name]
	elseif recepti["default"] ~= nil and recepti["default"][name] ~= nil then
		result = recepti["default"][name]
	elseif anom_recept_komp["default"] ~= nil and anom_recept_komp["default"][name] ~= nil then
		result = anom_recept_komp["default"][name]
	else
		-- нет информации!!!
		amk.send_tip("No information "..name.."!","cooking artifacts",0,15,"gen_info")
		result = nil
	end
	return result
end

-- іолучаем полнvй набор рецептов для аномалии anom_sect
function fill_recepti_est(anom_sect)
	local recepti_est = {} -- рецептv для заданной аномалии
	local anom_name = nil
	for anom, recepti in pairs(anom_recept_komp["anomalii"]) do
		if string_find(anom_sect, anom) ~= nil then --нашли в списке аномалиі.
			anom_name = anom_recept_komp["anomalii"][anom]["name"]
			if anom_recept_komp["anomalii"][anom]["recepti"] then
				for info, recept in pairs(recepti["recepti"]) do
					if not recept["not_for_mutator"] and not recept["remove_anomaly"] and (db.actor:has_info(info) or not recept["ne_ugadat"]) then
					-- if db.actor:has_info(info) then -- у ++ есть такой рецепт: заносим в таблицу
						recepti_est[info] = {}
						for k, v in pairs(recept) do
							if type(v) == "table" then
								recepti_est[info][k] = {}
								for i, j in pairs(v) do
									recepti_est[info][k][i] = j
								end
							else
								recepti_est[info][k] = v
							end
						end
					-- end
					end
				end
			end
		end
	end
	return recepti_est,anom_name
end

-- проверяет рецептv и компонетv
-- если всї в порядке - запускает варку/мутациі
function check_af_transform(af, af_sect, obj_pos, anom_id, anom_sect, anom_pos, anom_radius, lv, gv)
	local actor = db.actor
	
	--поиск по аномалиям
	local finish = false -- флаг для вvхода из циклов
	for anom, recepti in pairs(anom_recept_komp["anomalii"]) do
		if string_find(anom_sect, anom) ~= nil then --нашли в списке аномалиі, возле которой стоим
			local recepti_est = {} -- рецептv в наличии у ++, в которvх участвует даннvй компонент
			local recept_podhodit = false
			
			-- собираем рецептv, в которvх участвует даннvй компонент
			for info, recept in pairs(recepti["recepti"]) do
				if actor:has_info(info) and recept["komp"][af_sect] == true then --есть рецепт и этот компонент в нїм участвует
					recept_podhodit = true
					-- копируем рецепт
					recepti_est[info] = {}
					for k, v in pairs(recept) do
						if type(v) == "table" then
							recepti_est[info][k] = {}
							for i, j in pairs(v) do
								recepti_est[info][k][i] = j
							end
						else
							recepti_est[info][k] = v
						end
					end
					-- так как table.getn() как и оператор # не работаіт с таблицами, у которvх не целочисельнvе индексv,
					-- то считаем количество в ручнуі
					local count = 0
					for k,v in pairs(recepti_est[info]["komp"]) do
						count = count + 1
					end
					recepti_est[info]["count"] = count
					--get_console():execute("load ~#I#:"..string.format("0 "..af_sect.." принят. Lном: "..anom.." рец. "..info.." "..recepti_est[info]["count"]))
				end
			end
			
			if recept_podhodit then -- если нашли хоть один имеіийся подходяий рецепт
				--amk.send_tip("іецепт подошел. anom_radius "..anom_radius," варка",0,15,"gen_info")
				--ием рядом другие компонентv
				--если находим их в вvбраннvх рецептах, то удаляем их из рецептов
				--как только какой-то рецепт остаїтся без компонентов - рецепт сработал
				local obj
				for i=1,65534 do
					obj = level.object_by_id(i)
					if obj and alife():object(i) then
						local dist = obj:position():distance_to(anom_pos)
						if obj:parent() == nil and ((anom_radius - obj:position():distance_to(anom_pos)) > -2) then
							local obj_sect = obj:section()
							--get_console():execute("load ~#I#:"..string.format(" obj_sect: "..obj_sect.." dist: "..dist))
							--проверяем отобраннvе рецептv
							for info, recept in pairs(recepti_est) do
								-- если компонент есть в рецепте
								if recepti_est[info]["komp"][obj_sect] == true then
									-- добавляем L- компонента для буду его удаления из игрv
									recepti_est[info]["komp"][obj_sect] = obj:id()
									-- уменьшаем количество компонентов в рецепте
									recepti_est[info]["count"] = recepti_est[info]["count"] - 1
									--amk.send_tip(obj_sect.." найден. Lном: "..anom.." рец. "..info.." "..recepti_est[info]["count"],"варка",0,15,"gen_info")
									--get_console():execute("load ~#I#:"..string.format(obj_sect.." найден. Lном: "..anom.." рец. "..info.." "..recepti_est[info]["count"]))
									
									-- если рецепт пуст, то он сработал
									if recepti_est[info]["count"] == 0 then
										--get_console():execute("load ~#I#:"..string.format(info.." сработал. Lном: "..anom))
										
										-- устанавливаем все параметрv для рецепта, возможно из умолчаний
										local cel		= get_af_transform_param("cel", recepti_est[info], recepti)
										local v_udachi		= get_af_transform_param("v_udachi", recepti_est[info], recepti)
										local v_virogd		= get_af_transform_param("v_virogd", recepti_est[info], recepti)
										local virogd		= get_af_transform_param("virogd", recepti_est[info], recepti)
										local vremya		= get_af_transform_param("vremya", recepti_est[info], recepti)
										local remove_anomaly	= get_af_transform_param("remove_anomaly", recepti_est[info], recepti)
										local remove_anomaly_id = anom_id
										local komp		= recepti_est[info]["komp"]
										local result, udacha 	= af_select_result(v_udachi, v_virogd, virogd, cel, komp)
										local info_portion	= recepti_est[info]["info"]
										
										if cel == nil or v_udachi == nil or v_virogd == nil
											or virogd == nil or vremya == nil or remove_anomaly == nil 
											or cel == nil and remove_anomaly == false
											or v_udachi + v_virogd > 100 then
											
											-- кривой рецепт  - вvходим
											finish = true
											break
										end
										
										-- неудача
										if udacha == false then
											remove_anomaly = false
											info_portion = nil
										end

										level.add_pp_effector("teleport.ppe", 1524, false)
										
										-- запускаем варку/мутациі
										--[[if info_portion then
											get_console():execute("load ~#I#: info_portion: "..info_portion)
										else
											get_console():execute("load ~#I#: info_portion: nil")
										end]]
										as_start_universal_transform_timer(komp, result, obj_pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)
										
										-- удаляем из игрv компонентv рецепта
										for k,v in pairs(komp) do
											alife():release(alife():object(v))
										end
										
										-- вvходим
										finish = true
										break
									end
								end
							end
						end
					end
					
					if finish then break end
				end
			end
			
			-- аномалия с рецептами найдена, все дела сделанv - вvходим
			break
		end
	end

end

function af_flash(af)
	level.add_pp_effector("teleport.ppe", 1524, false)
	amk.remove_item(af)
end

-- случайно вvбирает результат, возвра ает таблицу с секциями результатов
function af_select_result(v_udachi, v_virogd, virogd, cel, komp)
	local rnd=math_random(0,100)
	if rnd > v_udachi then --неудача
		if rnd > v_virogd + v_udachi then -- отторжение
			return komp, false
		else -- вvрождение
			return virogd, false
		end
	else -- удача
		-- get_console():execute("load ~#I#:"..string.format("удача "..amk.pack_array_to_string(cel)))
		return cel, true
	end
end

-- запускаем трансофрмациі 
-- результатv могут бvть многочисленнv (несколько целей, полное отторжение компонентов, несколько вvрождений)
function as_start_universal_transform_timer(komp, result, pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)
	local t={} -- сохраняемvе даннvе
	t.result = result -- можно сохранять сразу таблицv
	t.pos = {}
		t.pos.x = pos.x
		t.pos.y = pos.y
		t.pos.z = pos.z
	t.gv=gv
	t.lv=lv
	t.info_portion = info_portion
	t.komp = komp -- можно сохранять сразу таблицv
	t.remove_anomaly = remove_anomaly
	t.remove_anomaly_id = remove_anomaly_id
	--get_console():execute("load ~#I#:"..string.format(" g_start_timer: "..vremya[1].." "..vremya[2].." "..vremya[3].." "..amk.pack_array_to_string(t)))
	amk.g_start_timer("af_transform_universal", vremya[1], vremya[2], vremya[3], t)
end

-- старая фунция
function af_start_transform(v1,v2,af_from,af_target)
	local rnd=math_random(0,100)
	if rnd>v1 then
		if rnd>v2+v1 then
			return af_from
		else
			return "af_buliz"
		end
	else
		return af_target
	end
end

-- старая фунция
function af_start_transform_timer(af,pos,delay_d,delay_h,delay_m,af_sect)
	local t={}
	t.section=af
	t.pos={}
		t.pos.x=pos.x
		t.pos.y=pos.y
		t.pos.z=pos.z
	t.gv=gv
	t.lv=lv
	t.from_sect=af_sect
	amk.g_start_timer("af_transform",delay_d,delay_h,delay_m,t)
end

-- завершаем варку/мутациі
-- может бvть много результатов
function af_transform_universal_end(params)
	--get_console():execute("load ~#I#:"..string.format(" af_transform_universal_end "))
	-- если есть результатv
	local count = 0
	for k, v in pairs(params.result) do
		count = count + 1
	end
	if count > 0 then
		local anom_pos = vector():set(params.pos.x, params.pos.y, params.pos.z)
		if db.actor:position():distance_to(anom_pos) < 15 then
			level.add_pp_effector("teleport.ppe", 1524, false)
		end
		-- формируем строку с названиями компонентов
		local from_komp = ""
		for k,v in pairs(params.komp) do
			if k then
				from_komp = from_komp..game.translate_string(amk.get_inv_name(k))..", "
			end
		end
		-- отсекаем ", " в хвосте
		from_komp = string_sub(from_komp, 1, -2)
		
		-- спавним результат(v)
		for k,v in pairs(params.result) do
			local obj
			obj = amk.spawn_item(k, vector():set(params.pos.x,params.pos.y,params.pos.z), params.gv, params.lv)
			amk.add_spot_on_map(obj.id, "red_location", game.translate_string("trans_finished_title").." of %c[255,255,0,0]"..from_komp)
		end
	
		amk.send_tip(game.translate_string("trans_finished_title").." of %c[255,255,0,0]"..from_komp)
	end
	
	-- даїм инфопорциі, если есть
	if params.info_portion and db.actor:dont_has_info(params.info_portion) then
		--get_console():execute("load ~#I#: params.info_portion: "..params.info_portion)
		db.actor:give_info_portion(params.info_portion)
		--[[if db.actor:has_info(params.info_portion) then
			get_console():execute("load ~#I#: params.info_portion: "..params.info_portion.." і+TL++=")
		end]]
	end
	
	-- удаляем аномалии, если нужно и она не в исклічениях
	-- код взят из amk_anoms.turn_off_all()
	if params.remove_anomaly then
		local sobj = alife():object(params.remove_anomaly_id)
		if sobj and game_graph():valid_vertex_id(sobj.m_game_vertex_id) then
			local map = alife():level_name(game_graph():vertex(sobj.m_game_vertex_id):level_id())
local obj_name=sobj:name()
	--		if not amk_anoms.check_exclusion(sobj, map) then 
				local status = amk_anoms.get_anomaly_status(sobj)
				if status=="" or status == "on" then
					amk_anoms.set_anomaly_status(sobj, "del")
			end
				alife():release(sobj, true)
	--		end
		end
	end
--[[	get_console():execute("load ~#I#:"..string.format(" варка закончена "))
	get_console():execute("flush")]]
end

-- старая функция
function af_transform_end(params)
	local from_sect="\""..params.from_sect.."\""
	local obj
	obj=amk.spawn_item(params.section,vector():set(params.pos.x,params.pos.y,params.pos.z),params.gv,params.lv)
	amk.add_spot_on_map(obj.id,"red_location",game.translate_string("trans_finished_title").."%c[255,255,0,0]"..from_sect)
	amk.send_tip(game.translate_string("trans_finished_title").."%c[255,255,0,0]"..from_sect)
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **    AMK_METKA     **   **   **   **   **    **   **   **   **
--'*******************************************************************************
local beakons={}
function check_beacon_drop(obj)
	local sim=not (alife()==nil)
	local actor=db~=nil and db.actor~=nil
	local lp=level.present()
	local dp=device()==nil or device():is_paused()
	if obj:section()=="amk_metka" and not has_alife_info("ui_pda") then
		beakons[obj:id()]=true
	end
end

function check_metka()
	for id,v in pairs(beakons) do
		local obj=level.object_by_id(id)
		if obj then
			beakons[id]=nil
			if obj:parent()==nil then
				local spwn=ui_dots.dots(get_hud(),id)
				level.start_stop_menu(spwn,true)
			end
		end
	end  
end
local last_update=0 
local inert = 1000 
local clicks_prev = 200 music_section="" music_previous_section="" music_next_section_start_time=0 music_stop_previous=0 music=false music_init = 0 music_themes = {} music_phases={} musicflag=1 
local music_objs={[1]=nil,[2]=nil} 
local music_stor={ enemy_see_actor=0, actor_see_enemy=0, enemy_hit_actor=0, actor_hit_enemy=0 } music_lo_lvl=7 music_hi_lvl=17 
local music_graph={}  

function build_music_graph() 
local skip = false 
local lname = level.name() 
	local iniFileName = "scripts\\amk\\music\\music.ltx"
	local sect = "music_themes"
	local sini = ini_file(iniFileName) 
	if sini and iniLineSectionExist(sect, iniFileName) then 
		local result, id, value = nil, nil, nil
		for a=0,iniLinesCount(sect, iniFileName)-1 do
			result, id, value = getIniLine(sect,a,"","", iniFileName) 
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				id=amk.trim(id)
				value1 = amk.str_explode("|", amk.trim(value), true)
				value={}
				for k,v in pairs(value1) do 
					local tmp = amk.str_explode("=", v, true)
					value[tmp[1]]=tmp[2]
				end 
if value.map then 
					local t = amk.str_explode(",", value.map, true)
					for kk,vv in pairs(t)do
						skip = skip or vv == lname
					end
					skip = not skip
				else
					skip = false
				end 
				if not skip then 
					table.insert(music_themes, id)
					--local t = amk.parse_ini_section_to_array(sini,id.."_music_files")
					local t = amk.parse_ini_section_to_array_new(iniFileName,id.."_music_files")
					t.null = ""
					for k,v in pairs(t) do
						music_phases[id.."_"..k]=v 
						if not music_graph[id.."_"..k] then
							music_graph[id.."_"..k] = {}
						end 
						--local tt = amk.parse_ini_section_to_array(sini,id.."_graph_"..k)
						local tt = amk.parse_ini_section_to_array_new(iniFileName,id.."_graph_"..k)
						for kk,vv in pairs(tt) do 
local tmp = amk.str_explode(",",vv,true) 
							local lvl = tmp[1]
							lvl = amk_mod["music_"..lvl.."_lvl"]
							music_graph[id.."_"..k][id.."_"..kk] = {lvl,tmp[2]}
						end
					end
				end
			end
		end 
		if #music_themes > 0 then
			return true
		else
			return false
		end
	end
	
	return false
end  

function music_start(sound) 
if not music then 
if music_objs[1]==nil then music_objs[1]=amk_music.amk_music() end 
if music_objs[2]==nil then music_objs[2]=amk_music.amk_music()  end music_objs[musicflag]:initialize(music_phases[sound]) music_next_section_start_time=music_objs[musicflag]:play()-200 music_previous_section=music_section musicflag=3-musicflag  end music = true end  

function music_change(sound) 
if music then music_objs[musicflag]:initialize(music_phases[sound]) music_next_section_start_time=music_objs[musicflag]:play_at_time(music_next_section_start_time+200)-200 musicflag=3-musicflag music_previous_section=music_section  end end  

function interactive_music() amk.oau_reason="music begin" 
if (amk.load_variable("option_mus",1)==0 or amk_music==nil) then return end 
if music_init==-1 then return end 
if music_init==0 then 
if build_music_graph() then music_init=1 else music_init=-1 return  end end 
if not music then 
if time_global() - last_update > inert then music_select_section(inert) last_update = time_global()  end end 
if not music and music_previous_section=="" and music_section~="" then music_start(music_section) end 
if music and music_previous_section~="" and music_section=="" then music_previous_section="" end 
if music then music_objs[1]:update() music_objs[2]:update() 
if time_global() > music_next_section_start_time then music_select_section(music_objs[musicflag]:length()) 
if music_section~="" then music_change(music_section) else music=false  end end  end amk.oau_reason="" end  

function reset_music_cntrs(c) music_stor.actor_see_enemy=music_stor.actor_see_enemy-2*c music_stor.enemy_see_actor=music_stor.enemy_see_actor-2*c music_stor.actor_hit_enemy=music_stor.actor_hit_enemy-8*c music_stor.enemy_hit_actor=music_stor.enemy_hit_actor-4*c 
if music_stor.actor_see_enemy<0 then music_stor.actor_see_enemy=0 elseif music_stor.actor_see_enemy>music_lo_lvl then music_stor.actor_see_enemy=music_lo_lvl end 
if music_stor.enemy_see_actor<0 then music_stor.enemy_see_actor=0 elseif music_stor.enemy_see_actor>music_lo_lvl then music_stor.enemy_see_actor=music_lo_lvl end 
if music_stor.actor_hit_enemy<0 then music_stor.actor_hit_enemy=0 elseif music_stor.actor_hit_enemy>music_hi_lvl then music_stor.actor_hit_enemy=music_hi_lvl end 
if music_stor.enemy_hit_actor<0 then music_stor.enemy_hit_actor=0 elseif music_stor.enemy_hit_actor>music_hi_lvl then music_stor.enemy_hit_actor=music_hi_lvl  end end 
local shoot_helper=0  

function calc_adrenaline(act,obj,typ) 
local dist = obj:position():distance_to(db.actor:position()) 
if act=="actor_see_enemy" then music_stor.actor_see_enemy=music_stor.actor_see_enemy+50/dist elseif act=="enemy_see_actor" then music_stor.enemy_see_actor=music_stor.enemy_see_actor+50/dist elseif act=="actor_hit_enemy" then 
if time_global()>shoot_helper then music_stor.actor_hit_enemy=music_stor.actor_hit_enemy+13 shoot_helper=time_global()+500  end elseif act=="enemy_hit_actor" then music_stor.enemy_hit_actor=music_stor.enemy_hit_actor+8  end end  

function music_select_section(time) reset_music_cntrs(time/inert) 
local cs = music_section 
local eseen = music_stor.enemy_see_actor 
if eseen >= music_lo_lvl then eseen = music_lo_lvl  end 
local aseen = music_stor.actor_see_enemy 
if aseen >= music_lo_lvl then aseen = music_lo_lvl  end 
local ehits = music_stor.enemy_hit_actor 
if ehits >= music_hi_lvl then ehits = music_hi_lvl  end 
local ahits = music_stor.actor_hit_enemy 
if ahits >= music_hi_lvl then ahits = music_hi_lvl  end 
local lvl = aseen + eseen 
if lvl>music_hi_lvl*0.75 then lvl=music_hi_lvl*0.75  end lvl = ehits + lvl + ahits 
if music_section=="" then music_section=music_themes[math_random(#music_themes)].."_null"  end 
local last_sel_max=0 
local last_sel_min=1000 for k,v in pairs(music_graph[music_section]) do 
if v[2]=="<" and v[1]<last_sel_min then 
if v[1]>lvl then music_section=k last_sel_min=v[1]  end end 
if v[2]==">" and v[1]>=last_sel_max then 
if v[1]<=lvl then music_section=k last_sel_max=v[1]  end end end 
if string_find(music_section,"null") then music_section="" end 
if music and music_previous_section~="" and music_section=="" then music_previous_section=""  end 
local l=0 
if music and music_objs[musicflag]~=nil then l=music_objs[musicflag]:length()  end end  

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **      BLOWOUT        **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function blowout_phantoms()
	local blow=amk.load_variable("blowout",-1)
	local bt=blowout_type()
	if blow>1 and blow<4 and bt<2 then
	  local lname=level.name()
		if not in_hide and amk_hideouts.blowouts_phantoms[lname] then
			local phantoms=amk_hideouts.blowouts_phantoms[lname]
			if phantoms and phantoms.count>0 then
				if math_random()<phantoms.probability then
					if phantom_manager:phantom_count()<phantoms.count then
						local yaw	 			= math_pi*2.0*math_random()
						local radius 			= phantoms.radius*(math_random()/2.0+0.5)
						local height 			= phantoms.height*math_random()
						local a_pos 			= db.actor:position()
						local pos 				= vector():set(math_sin(yaw)*radius+a_pos.x,a_pos.y+height,math_cos(yaw)*radius+a_pos.z)
						phantom_manager.spawn_phantom(pos)
					end
				end
			end
		end
	end
end

function blowout_scary_sounds()
	local blow=amk.load_variable("blowout",-1)
	if blow>0 and blow<4 then
		local snd_obj = xr_sound.get_safe_sound_object(amk_hideouts.blowout_sounds[math_random(#amk_hideouts.blowout_sounds)])
		local a=vector()
		a.x=math_random(0,10)
		a.y=math_random(0,10)
		a.z=math_random(0,10)
		snd_obj:play_at_pos(db.actor, db.actor:position():add(a))
		amk.start_timer("blowout_ss",math_random(10,30),0)
	end
end

function blowout_psy_sound(action)
	if action=="start" then
		snd_obj_eq = sound_object([[ambient\earthquake]],sound_object.looped+sound_object.s2d)
    snd_obj_eq:play(db.actor, 4, sound_object.looped+sound_object.s2d)
	end
	if action == "stop" then
		if snd_obj_eq then snd_obj_eq:stop() end
	end
	
	local lname=level.name()
	if not amk_hideouts.blowouts_phantoms[lname] then return end
	local psy_sound=amk_hideouts.blowouts_phantoms[lname].psy_sounds or false	
	if not psy_sound then return end

	if action=="start" then
		local level_vol=amk_hideouts.blowouts_phantoms[lname].level_vol or 1				
		sound_obj_right, sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
		sound_obj_left:play_at_pos (db.actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		sound_obj_right:play_at_pos(db.actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		snd_volume	= level.get_snd_volume()
		level.set_snd_volume( level_vol )
	end
	if action == "stop" then
		if sound_obj_left then sound_obj_left:stop() end
		if sound_obj_right then sound_obj_right:stop() end
		if snd_volume then level.set_snd_volume(snd_volume) end
	end	
end

function blowout()
	return amk.load_variable("blowout",-1)>-1 and amk.load_variable("blowout",-1)<5
end

--[[------------------------------- no freeplay --------------------------------]]
function Run_Blowout_pp()
if game_options.run_blowout_pp == 1 then
		local bt=blowout_type()
		if bt==2 then start_blow_timer() return end
		sleep_manager.stopper()
		amk.save_variable("blowout",1)
		if bt<1 then
			level.add_pp_effector("monolith_off.ppe", 2003, false)
			level.add_cam_effector("camera_effects\\shell_shock.anm", 2004, false, "")
			dmx_pda_notepad.pda_radio_stop()
			dmx_cars.car_radio_stop()
			dmx_mod.play_sound([[ambient\blowout_begin]])
			dmx_mod.blowout_phrases()
		end
		amk.start_timer("blowout_ss",math_random(5,15),0)
		amk.start_timer("blowout",11,0)
	end
	start_blow_timer()
end

function start_blow_timer()
local basis = game_options.blow_time_basis
local shift = game_options.blow_time_shift
local resuls = basis + (math_random()*shift) - (shift/2)
amk.g_start_timer("blow_shift", 0, 0, resuls)
if (news_main and news_main.next_blow) then news_main.next_blow(resuls) end
end

function Blowout_pp(phase)
---------------------------------------------------
--' TimeFactor = 5
--' GameMin = 12 RealSec
--' TimeBlowout = 184 RealSec

--' начало (Timer = 36 sec)
--' первая фаза (Timer = 36 sec)
--' вторая фаза (Timer = 36 sec)
--' Tретья фаза (Timer = 36 sec)
--' четвертая фаза (Timer = 60 sec)
--' конечная фаза (Timer = 0 sec)
---------------------------------------------------

	amk.mylog("blowout "..phase)
local basis = game_options.blow_phase_basis
local shift = game_options.blow_phase_shift
local max = game_options.blow_phase_max
local resuls = basis + (math_random()*shift) - (shift/2)
if resuls < 1 then resuls = 1 elseif resuls > max then resuls = max end
local blow = amk.load_variable("blowout", 0)
local bt=blowout_type()
if blow > 0 and blow < 4 and bt == 2 then amk.g_start_timer("blowout", 0, 0, 3, 4) end
	if phase==0 then
		amk_anoms.pre_blow_off()
		if bt<1 then
			level.set_weather("pre_blow",true)
			level.set_weather_fx("amk_surge_day")
		end 
amk.g_start_timer("blowout", 0, 0, resuls, 1)
	elseif phase==1 then
		local snd_obj = xr_sound.get_safe_sound_object([[ambient\earthquake]])
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		snd_obj = xr_sound.get_safe_sound_object([[anomaly\blowout]])
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		blowout_psy_sound("start")
		if bt < 1 then
			level.add_pp_effector("vibros.ppe", 2001, true)
		end
		in_hide=false
amk.g_start_timer("blowout", 0, 0, resuls, 2)
		amk.save_variable("blowout",2)	
	elseif phase==2 then
		local lvl = level.name()
		if lvl ~= "l03u_agr_underground" and lvl ~= "l04u_labx18" and lvl ~= "l08u_brainlab" and lvl ~= "l10u_bunker" and lvl ~= "l12u_sarcofag" and lvl ~= "l12u_control_monolith" and lvl ~= "peshera" and lvl ~= "av_peshera" and lvl ~= "warlab" and lvl ~= "jupiter_underground" and lvl ~= "labx8" then
			dmx_mod.wave_playing = true
			dmx_mod.wave_play_dist = 250
		end
		amk.g_start_timer("blowout",0,0,3,3)
	elseif phase==3 then
		amk_anoms.after_blow_on()
		sak.off_testobj()
		amk.save_variable("blowout",3)
		local h = hit()
		local cr
		h.type = hit.strike
		h.power = 1000
		h.impulse = 1000
		for a=1,65534,1 do
			cr=level.object_by_id(a)
			if cr~=nil and cr:section()=="m_crow" and math_random(0,100)<70 then
				h.draftsman = cr
				h.direction = cr:direction()
				cr:hit(h)
			end
		end
amk.g_start_timer("blowout", 0, 0, resuls, 4)
	elseif phase==4 then
		amk.save_variable("blowout",4)
		level.remove_cam_effector(2002)
		if bt<1 then
			level.remove_pp_effector(2001)
			level.add_pp_effector("monolith_off.ppe", 2003, false)
		end
		blowout_psy_sound("stop")
		amk.start_timer("blowout",5,5)
	elseif phase==5 then
		level.set_weather(amk.load_variable("weather","default1"))
		if bt<1 then
			local snd_obj = xr_sound.get_safe_sound_object([[anomaly\teleport_work2]])
			snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		amk.del_variable("blowout")
        if game_options.zombie_team == 1 then
            tag_spb.zombie_team()
        end 
		turret_spawn.clear_respawn_turrets()
	end
end
--[[--------------------------------- lsclon -----------------------------------]]

local next_actor_hit_time=0
function on_blowout_hit_actor()
	if next_actor_hit_time<time_global() and not has_alife_info("anabiotic_protection_info") then
		next_actor_hit_time=time_global()+1000
		on_blowout_hit(db.actor)
	end
end

function on_blowout_hit(npc,hide)
	local bt=blowout_type()
	if bt>0 or amk.load_variable("blowout",-1)~=3 then 
		if npc:id()==db.actor:id() then in_hide = true end
		return false
	end
	
	local lname=level.name()
	local need_hit
	need_hit=true
	local khit=1
	if hide and hide.zone then
		need_hit = not check_npc_in_hideout(npc,hide)
		if not need_hit then
			if hide.defence then 
				khit=hide.defence
			else
				khit=0
			end
		end
	else
		local hides=amk_hideouts.hide[lname]
		local tmp
		if hides then
			for i,o in ipairs(hides) do
				if o.zone then
					for j,v in ipairs(o.zone) do
						if v.p3 then
							tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
						else
							tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
						end
						need_hit = need_hit and not tmp
						if tmp then
							if o.defence then 
								khit=o.defence
							else
								khit=0
							end
						end
					end
				end
			end
		end
	end

    if npc:id()==db.actor:id() then in_hide = not need_hit end
    if (need_hit or khit>0) and amk.load_variable("blowout",-1)==3 then
		local h = hit()
    	h.power = (amk_hideouts.blowout_damages[lname] or 0.01)*khit
    	h.impulse = 0
		h.draftsman = npc
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine") -- чтобv учитvвалась броня
    	h.type = hit.strike
		npc:hit(h)
    	h.type = hit.telepatic
		npc:hit(h)
    	h.type = hit.radiation
		npc:hit(h)
    end
    return need_hit or khit>0
end

function check_npc_in_hideout(npc,hide)
	local not_in_zone=true
	if hide and hide.zone then
		for k,v in pairs(hide.zone) do
			if v.p3 then 
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
			else
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
			end
		end
	end
	return not not_in_zone
end

function initial_spawn(action)
	local fr=0
	for i=0,amk_hideouts.anom_count-1,1 do
		local sobj = alife():story_object(amk_hideouts.anom_sid0+i)
		if not sobj then 
			alife():create(i+amk_hideouts.anom_num0) 
			fr=1
		end
	end
	if fr==1 then create_anoms() end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       ANOMS SPAWN        **   **   **   **   **    **   **   **   
--'*******************************************************************************
anomalies_state={}

function remove_anoms()
	amk.save_variable("blowout_anoms",string.rep(string.char(128),math_ceil(amk_hideouts.anom_count/7)))
	update_anoms()
end

function create_anoms()
	anomalies_state={}
	for i=amk_hideouts.anom_sid0,amk_hideouts.anom_sid0+amk_hideouts.anom_count-1,1 do
		anomalies_state[i]=math_random(0,1)==1
	end
	local str=pack_anoms(anomalies_state)
	amk.save_variable("blowout_anoms",str)
	update_anoms()
end

function update_anoms()
	local anoms=amk.load_variable("blowout_anoms",string.rep(string.char(128),math_ceil(amk_hideouts.anom_count/7)))
	anomalies_state=unpack_anoms(anoms)
	for i=amk_hideouts.anom_sid0,amk_hideouts.anom_sid0+amk_hideouts.anom_count-1,1 do
		local sobj=alife():story_object(i)
		if sobj then
			local obj=level.object_by_id(sobj.id)
			if obj then
				if anomalies_state[i] then
					obj:enable_anomaly()
				else
					obj:disable_anomaly()
				end
			end
		end
    end
end

-- anom_state[sid]==true для активнvх аномалий
function pack_anoms(anom_state)
	local str=""
	for i=0,amk_hideouts.anom_count-1,7 do
		local cval=128
		local mul=1
		for j=0,6,1 do
			if anom_state[i+j+amk_hideouts.anom_sid0] then
				cval=cval+mul
			end
		mul=mul*2
		end
    str=str..string.char(cval)
	end
	return str
end

function unpack_anoms(str)
	local anom={}
	for i=1,string.len(str),1 do
		local cval=string.byte(string_sub(str,i,i))
		local mul=1
		for j=0,6,1 do
			anom[(i-1)*7+j+amk_hideouts.anom_sid0]=bit_and(mul,cval)~=0
			mul=mul*2
		end
	end
	return anom
end

--[[------------------------------- no freeplay --------------------------------]]
function blowout_type()
	local lname=level.name()
local blow_type = amk_hideouts.blowout_types[lname]
return blow_type or 0
end
--[[--------------------------------- lsclon -----------------------------------]]

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **    **      RECEPTS       **   **   **   **   **    **   **   **   ** 
--'*******************************************************************************
function check_usable_item(obj)
	local info=nil
	if obj:section()=="vehicle_btr" then
		db.actor:kill(db.actor)
	end
	if obj:name()=="mil_stalker0012" then
		info="info_amk_recipt_stone_dikoobraz"
	elseif level.name()=="l01_escape" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_shkura"
		amk.drop_item(db.actor,obj)
		amk.remove_item(obj)
	elseif level.name()=="l04u_labx18" and obj:section()=="amk_zapiska" then
		info="info_amk_recipt_simbion"
		amk.drop_item(db.actor,obj)
		amk.remove_item(obj)
	elseif level.name()=="l08u_brainlab" and obj:section()=="amk_zapiska" then
		local infos = {
				"info_amk_recipt_dummy",
				"info_amk_recipt_dummy_fire",
				"info_amk_recipt_dummy_bright",
				"info_amk_recipt_dummy_moon",
				"info_amk_recipt_dummy_puding"
				}
		amk.drop_item(db.actor,obj)
		amk.remove_item(obj)
		if db.actor==nil then
			return
		end
		local info_given = false
		for i=1,#infos do
			local inf = infos[i]
			if db.actor:dont_has_info(inf) then
				db.actor:give_info_portion(inf)
				info_given = true
			end
		end
		if info_given then
			amk_dialogs.info_received()
		end
		return
	else
		local recipes=amk.load_table("amk_body_recipe")
		info=recipes[obj:id()]
	end  
	if db.actor==nil or info==nil or db.actor:has_info(info) then
		return
	end
	db.actor:give_info_portion(info)
	amk_dialogs.info_received()
end

function generate_recipe(obj)
	if obj and IAmAMonster[obj:clsid()] then
		return
	end
	local info=nil
	local prop=100
  if level.name()=="l07_military" and obj.character_community and
          obj:character_community()=="killer" then
		info="info_amk_recipt_titan_kolobok"
		prob=30
  elseif level.name()=="l10_radar" and obj.character_community and
          obj:character_community()=="monolith" then
		info="info_amk_recipt_controller_skalp"
		prob=10  
	end
	if not info then return end
	local recipes=amk.load_table("amk_body_recipe")
	-- іроверим не генерился ли уже этот рецепт
	for k,v in pairs(recipes) do
		if v==info then
			return
		end
	end
	-- Tгенерим рецепт
	if math_random(100)<=prob then
		recipes[obj:id()]=info
		amk.save_table("amk_body_recipe",recipes)
	end
end
--'*******************************************************************************
--'   **   **   -- Dynamic HUD Gift from ATT, Arharа and Kolmogor --   **   **  
--'*******************************************************************************
-- чтобv отклічить эффект, поставьте вместо единицv ноль:
local suithud_enable = 1 -- худ костіма
local blurs_enable = 1 -- эффект запотевания
local blood_enable = 1 -- эффект ранения
local bleed_enable = 1 -- эффект плохого самочувствия
local otladka = 0 -- вvвод в лог
--------------------------------------------------------------------------------
local suitHudName_wotType = {
	["bandit_gaz_outfit_"]				= "hud_gaz",
	["dolg_gaz_outfit_"]				= "hud_gaz",
	["monolit_gaz_outfit_"]				= "hud_gaz",
	["neytral_exo_gaz_outfit_"]			= "hud_gaz",
	["neytral_gaz_outfit_"]				= "hud_gaz",
	["neytral_novice_gaz_outfit_"]		= "hud_gaz",
	["outfit_svoboda_"]					= "hud_gaz",
	["svoboda_gaz_outfit_"]				= "hud_gaz",
	["svoboda_heavy_gaz_outfit_"]		= "hud_gaz",
	["dolg_scientific_outfit"]			= "hud_sci",
	["scientist_suit_white"]			= "hud_sci",
	["fire_outfit"]						= "hud_sci",
	["ecolog_outfit"]					= "hud_sci",
	["freedom_scientific_outfit"]		= "hud_sci",
	["merc_scientific_outfit"]			= "hud_sci",
	["monolit_scientific_outfit"]		= "hud_sci",
	["protection_outfit"]				= "hud_sci",
	["nebo_exo_outfit"]					= "hud_sci",
	["nebo_scientific_outfit"]			= "hud_sci",
	["scientific_outfit"]				= "hud_sci",
	["killer_gaz_outfit_"]				= "hud_merc",
	["outfit_killer_"]					= "hud_merc",
	["military_outfit"]					= "hud_mil",
	["militaryspec_outfit"]				= "hud_mil",
	["outfit_specnaz_"]					= "hud_mil",
	["specops_outfit"]					= "hud_mil",
	["nano_outfit"]						= "hud_nano",
	["broken_exoskeleton"]				= "hud_exo",
	["dolg_black_exoskeleton"]			= "hud_exo",
	["exo_bandit_outfit"]				= "hud_exo",
	["exo_outfit"]						= "hud_exo",
	["killer_blue_exoskeleton"]			= "hud_exo",
	["military_exo_outfit"]				= "hud_exo",
	["monolit_exoskeleton"]				= "hud_exo",
	["neytral_exo_antigas_outfit"]		= "hud_exo",
	["outfit_exo_"]						= "hud_exo",
	["svoboda_exoskeleton"]				= "hud_exo",
	["svoboda_yellow_exo_outfit_"]		= "hud_exo",
	["exo_mil_exoskeleton_"]			= "hud_exo_military"
}

local freemem = 0
local freemem2 = 0
function doabcevents()
	if db.actor ~= nil then
		local chkfreetime = time_global()
		if freemem == 0 then freemem = time_global() + 1000 end
		if chkfreetime > freemem then
			freemem = 0
            check_hud()
			--checkmysuithud()
			bleedcondition()
		end
		zoom_hud()
		local chkfreetime2 = time_global()
		if freemem2 == 0 then freemem2 = time_global() + 40 end
		if chkfreetime2 > freemem2 then
			freemem2 = 0
			init_blurs()
			blood()
			set_blood()
		end
	end
end

local current_suithud
local mycurrent_suithud
local suit_condition
local wotsuittype = ""
local smoktime = 0
function check_hud()
if monnoroch_options.suithud_enable == 0 then return end   -- by Monnoroch
--if amk.load_variable("option_hud",2)~=2 then return end    -- by Monnoroch
local gsmktime = time_global()
if smoktime == 0 then smoktime = time_global() + 4000 end
if db.actor ~= nil then
 local csuithud = db.actor:get_current_outfit()
 local suithudtype, isitbino, suithudname
 if csuithud ~= nil then suithudname = csuithud:section() end
 if suithudname ~= nil then
  suit_condition = ""
  if csuithud:condition() > 0.87 then
	suit_condition = "blue"
  elseif csuithud:condition() > 0.69 then
	suit_condition = "green"
  elseif csuithud:condition() > 0.60 then
	suit_condition = "yellow"
  elseif csuithud:condition() > 0.40 then
	suit_condition = "red"
  elseif csuithud:condition() > 0.25 then
	suit_condition = "red2"
  else
	suit_condition = "red3"
  end
	if otladka ~= 0 then
		get_console():execute("load ~~~ suithudname: "..suithudname)
	end
	for k,v in pairs(suitHudName_wotType) do
		if string_find(suithudname, k) then
			suithudtype = v.."_"..suit_condition
			wotsuittype = v
			if otladka ~= 0 then
				get_console():execute("load ~~~ found suithudname: "..suithudname.." key: "..k.." type: "..v)
			end
			break
		end
	end
 else
	suithudtype = nil
 end
-- by Monnoroch
if amk.load_variable("option_hud",2)==0 then   
suithudtype = nil                              
hidden_slots.remove_helmet_static()
end   
 if not db.actor:alive() then suithudtype = nil hidden_slots.remove_helmet_static() end
 
-- DMX MOD on
-- Убираем худ костюмов при виде от 3-го лица
local helmet = hidden_slots.get_item_in_helmet_slot()
if db.actor:bone_position("bip01_head"):distance_to_sqr(device().cam_pos) > 7 then
    suithudtype = nil
    hidden_slots.remove_helmet_static()
elseif not suithudtype and helmet then
    hidden_slots.add_helmet_static(helmet)
end
-- DMX MOD off

  setmysuithud(suithudtype)
end
end

local suitfirstrun = "yes"
function setmysuithud(hudtype)
  if hudtype == nil then
	local wchud = get_hud():GetCustomStatic(mycurrent_suithud)
	if wchud ~= nil then get_hud():RemoveCustomStatic(mycurrent_suithud) end
	mycurrent_suithud = nil
	suitfirstrun = "yes"
    return
  end
  if hudtype ~= mycurrent_suithud then
    if mycurrent_suithud then
      get_hud():RemoveCustomStatic(mycurrent_suithud)
    end
    if hudtype then
      get_hud():AddCustomStatic(hudtype)
	  dmx_mod.hidden_static() -- DMX MOD
	  if string_find(hudtype, wotsuittype) then
		if suitfirstrun == "no" and suit_condition ~= "green" and suit_condition ~= "blue" then
			local snd_obj = sound_object("material\\glass\\glass_fall03hl")
			snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 9.0)
		end
		if suitfirstrun == "yes" then suitfirstrun = "no" end
      end
    end
    mycurrent_suithud = hudtype
  end
end

local actor_last_health = 0
local bloodtime = 0
local bloodtimeb = 0
local isbleeding = "no"
local countblood = 0
function blood()
if monnoroch_options.blood_enable == 0 then return end   -- by Monnoroch
local radwidth = db.actor.radiation
if db.actor ~= nil and radwidth == 0 then
if db.actor:alive() then
 local current_health = math_floor(db.actor.health * 100)
 local cbloodtime = time_global()
  if cbloodtime > bloodtime and isbleeding == "stopit" then
    for i=1,4 do
     if get_hud():GetCustomStatic("hud_blood"..i) ~= nil then
		get_hud():RemoveCustomStatic("hud_blood"..i)
		isbleeding = "no"
	end
   end
  end
  if cbloodtime > bloodtime then
    bloodtime = time_global() + 1500
    if actor_last_health > current_health and actor_last_health ~= 0 then isbleeding = "yes" end
    actor_last_health = math_floor(db.actor.health * 100)
 end
end
end
end

local m_blood = nil
function set_blood()
if monnoroch_options.blood_enable == 0 then return end   -- by Monnoroch
local radwidth = db.actor.radiation
local cbloodtimed = time_global()
if db.actor ~= nil and cbloodtimed > bloodtimeb and isbleeding == "yes" and radwidth == 0 then
  bloodtimeb = time_global() + 170
  m_blood={}
  countblood = countblood + 1
  get_hud():AddCustomStatic("hud_blood"..countblood)
  m_blood[countblood]=get_hud():GetCustomStatic("hud_blood"..countblood):wnd()
  local chudblood = "hud_blood"..countblood
  if countblood == 4 then
	isbleeding = "stopit"
	countblood = 0
  end
end
end

local isactcondset = "false"
local radeffect = "false"
function bleedcondition()
if monnoroch_options.bleed_enable == 0 then return end   -- by Monnoroch
	local actor = db.actor
   if actor.health < 0.31 and isactcondset ~= "true" then
	   level.add_pp_effector ("alcohol.ppe", 2012, true)
	   isactcondset = "true"
   end
   if actor.health > 0.30 and isactcondset ~= "false" then
	   level.remove_pp_effector (2012)
	   isactcondset = "false"
   end
   if actor.radiation > 0.3 and radeffect ~= "true" then
	   level.add_pp_effector ("alcohol.ppe", 2013, true)
	   radeffect = "true"
   end
   if actor.radiation == 0 and radeffect ~= "false" then
	   level.remove_pp_effector (2013)
	   radeffect = "false"
  end
if (ui_rad and actor.health>0 and amk.load_variable("option_rad",1) ~= 0) then
		
		if bind_stalker.scopeUsed then
			ui_rad.update(false)
		else
			ui_rad.update(true)
		end
		--[[if act_it and act_it:section()=="wpn_binoc" then
			local zoom=67.5/device().fov
			zoom=(zoom-1)*1.5+1
			if zoom<1.001 then zoom=1.001 end
			if zoom > 1.3 then
				ui_rad.update(false)
			else
				ui_rad.update(true)
			end
		else
			ui_rad.update(true)
		end]]
	elseif (ui_rad) then
		ui_rad.update(false)
	end
end

function init_blurs()
local helmets_hud = get_hud():GetCustomStatic("helmet_gasmask_static") or get_hud():GetCustomStatic("helmet_respirator_static") or get_hud():GetCustomStatic("helmet_hardhat_static") or get_hud():GetCustomStatic("helmet_protective_static") or get_hud():GetCustomStatic("helmet_tactic_static")
	if monnoroch_options.blurs_enable == 0 then return end   -- by Monnoroch
	if (mycurrent_suithud ~= nil and amk.load_variable("option_hud",2)==2 and not string_find(mycurrent_suithud,"_red3") and not string_find(mycurrent_suithud,"hud_sci_")) or (helmets_hud and amk.load_variable("option_hud",2)==2) then
		local zoom=67.5/device().fov
		zoom=(zoom-1)*1.5+1
		if zoom<1.001 then
			zoom=1.001
		end
		local stretchy=0.75/(math_floor(device().aspect_ratio*1000)/1000)
		if stretchy<1 then stretchy=1 end
		local rect={x=-768*zoom+768,y=(-512*zoom+512)*stretchy-(stretchy-1)*300,w=1024*zoom,h=768*zoom*stretchy}
		set_blurs(true,rect)
	else
		set_blurs(false)
	end
end

local blurs=nil
local blurval=0 -- уровень запотевания от 0 до 1
local blurlt=0 -- время последнего обновления
local blurcyctime=0 -- время начала последнего цикла дvхания (вvдох)
local blurlastphase=0

function set_blurs(enabled,rect)
	if (not blurs) or get_hud():GetCustomStatic("hud_blur1")==nil then
		blurs={}
		for i=1,4 do
			get_hud():AddCustomStatic("hud_blur"..i)
			blurs[i]=get_hud():GetCustomStatic("hud_blur"..i):wnd()
			blurs[i]:SetWidth(0)
		end
	end
	if not enabled then
		for i=1,4 do
			blurs[i]:SetWidth(0)
		end
		return    
	end
  
-- Јиклv в зависимости от силv дvхания: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
	local power=db.actor.power
	local period=1.0+power*power*1.0 -- теку ая частота дvхания от 30 до 120 циклов в минуту
	local expirt=0.3
	local breathpower=3
  
	local delta=(time_global()-blurlt)/1000 -- дельта в секундах
	local phase=(time_global()-blurcyctime)/1000 -- фаза дvхательного цикла в сек.
	blurlt=time_global()
	if phase>period then
		phase=phase%period
		blurcyctime=blurlt-phase*1000
	end
	if blurlastphase>phase then
		blurlastphase=0
	end
  
	local blurdelta=delta*-0.7 -- работа вентилляции
	if blurlastphase<expirt and phase<expirt then
		blurdelta=blurdelta+(phase-blurlastphase)*breathpower
	elseif blurlastphase<expirt then
		blurdelta=blurdelta+(expirt-blurlastphase)*breathpower
	end
	blurlastphase=phase
  
	blurval=blurval+blurdelta
	if blurval>0.999 then
		blurval=0.999
	elseif blurval<0 then
		blurval=0
	end
  
	local tm=math_floor(blurval*3)
	local tmn=(tm+1)
	local v=blurval*3-math_floor(blurval*3)
	v=1-v
	local v1=1-v
	if tm~=0 then
		blurs[tm]:SetColor(GetARGB(v*255,255,255,255))
	end
	if tmn~=0 then
		blurs[tmn]:SetColor(GetARGB(v1*255,255,255,255))
	end
	for i=1,4 do
		if i==tm or i==tmn then
			blurs[i]:SetWndRect(Frect():set(rect.x,rect.y,rect.w,rect.h))
		else
			blurs[i]:SetWndRect(Frect():set(rect.x,rect.y,0,0))
		end
	end
end

-- Эффект прицеливания
-- Автор: Bak
-- Адаптация: Charsi
local pre_fov = 0
local precf = 0
local ztime = time_global()
local zbias = Frect():set(0,0,1027,768)
local zenc
function zoom_hud()
local hud = get_hud():GetCustomStatic(mycurrent_suithud) or get_hud():GetCustomStatic("helmet_gasmask_static") or get_hud():GetCustomStatic("helmet_respirator_static") or get_hud():GetCustomStatic("helmet_hardhat_static") or get_hud():GetCustomStatic("helmet_protective_static") or get_hud():GetCustomStatic("helmet_tactic_static")
		if hud then
			local cf = precf
			local fov = math.floor((device().fov+0.02)*10)
			local delta = time_global()-ztime
			ztime = time_global()
			if not zenc or fov > 38*10 and pre_fov < fov then
				zenc = nil
				if cf > 0 then
					cf = cf-(delta/400)
					if cf < 0 then
						cf = 0
					end
				end
			end
			if zenc or fov < 58*10 and pre_fov > fov then
				zenc = true
				if cf < 1 then
					cf = cf+(delta/400)
					if cf > 1 then
						cf = 1
					end
				end
			end
			if cf ~= precf then
				local wpn = db.actor:active_item()
				if wpn then
					if wpn:clsid() == clsid.wpn_binocular_s then
						zbias:set(-100*cf,-100*cf,1027+100*cf,768+100*cf)
					elseif rx_utils.addon_attached(wpn,"sc") then
						zbias:set(-350*cf,-175*cf,1027,768+175*cf)
					else
						zbias:set(-200*cf,-100*cf,1027,768+100*cf)
					end
					hud:wnd():SetWndRect(zbias)
				elseif precf ~= 0 then
					zbias:set(0,0,1027,768)
					hud:wnd():SetWndRect(zbias)
				end
				precf = cf
			end
			pre_fov = fov
		end
end



--'*******************************************************************************
--'   **   **   **   **   **    **   **   **     SPAWN_OBJ        **   **   **   **   **    **   **   **   **   
--'*******************************************************************************
function spawn_fuel()
	local ballons = {
	{108.16, -6.30, -18.17, 412158, 115},
	{370.12, 15.06, -39.48, 594401, 0},
	{58.30, 19.36, 156.50, 345136, 97},
	{-92.21, -1.18, -212.66, 115177, 268},
	{-74.17, 1.80, 8.45, 127766, 329},
	{3.18, 1.24, 42.48, 243919, 490},
	{15.35, -1.90, 2.40, 255433, 479},
	{77.54, 0.30, -108.47, 312366, 427},
	{-145.54, -0.00, -199.61, 92520, 650},
	{-130.08, 10.00, -196.67, 109214, 629},
	{-140.13, 10.00, -197.94, 98647, 629},
	{37.28, 1.02, -49.90, 220638, 1084},
	{476.68, -46.94, -0.23, 155714, 1919},
	{76.80, -2.54, -23.93, 36304, 1970},
	{94.78, 0.03, -6.88, 88986, 1514},
	{-3.24, -11.75, -263.07, 33794, 1448}
	}
	local kanisters = {
	{-293.80, -14.18, -15.36, 15703, 67},
	{-16.57, 2.48, 58.82, 260308, 88},
	{-74.81, -1.30, 160.52, 196218, 163},
	{-69.94, 0.97, 6.51, 131411, 329},
	{64.01, 0.60, 148.46, 235341, 364},
	{63.29, -0.20, 5.10, 299326, 461},
	{-28.52, -1.04, -181.84, 211644, 676},
	{2.93, -1.88, -13.30, 176553, 1047},
	{41.71, 4.54, -86.36, 227110, 1100},
	{7.90, 1.41, -71.93, 183138, 1041},
	{158.71, -0.76, -259.73, 358950, 962},
	{-342.92, -13.60, 390.01, 11235, 1847},
	{305.22, -36.99, -24.40, 68330, 1930},
	{55.02, 1.17, 40.35, 68094, 1511},
	{-114.14, -0.00, 121.75, 43453, 1315},
	{31.33, 5.60, -13.51, 4683, 1538}
	}
	for k,v in pairs(ballons) do
		if #v == 5 then
			local obj = alife():create("amk_ballon",vector():set(v[1], v[2], v[3]), v[4], v[5])
			if obj and is_debug==true then
				amk.add_spot_on_map(obj.id, "red_location", "ballon")
			end
		end
	end
	for k,v in pairs(kanisters) do
		if #v == 5 then
			local obj = alife():create("amk_kanistra",vector():set(v[1], v[2], v[3]), v[4], v[5])
			if obj and is_debug==true then
				amk.add_spot_on_map(obj.id, "red_location", "kanistra")
			end
		end
	end
end

-- +Tі на блокпосту
function spawn_military_btr()
	spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-168.11, -29.71, -303.21),81808,38 ) ,"vehicle_btr")
	spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-237.85, -26.23, -378.81),17147,14 ) ,"vehicle_btr")
	--spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-189.55,-0.24,-140.49),46901,559),"vehicle_btr")
	--spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-93.81,0,-185.82),146369,607),"vehicle_btr")
	spawn_military_tech_pack( alife():create("helicopter",vector():set(-150.0,-40.0,-620.0),128298,11 ) ,"helicopter")
     --spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-135.49, -30.13, -375.27),115062,20 ) ,"vehicle_btr")
     --spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-167.58, -29.48, -364.26),82401,31 ) ,"vehicle_btr")
end

function spawn_military_tech_pack(obj, spawn_item)	
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	if spawn_item == "helicopter" then
		-- свойства cse_motion
		motion_name = packet:r_stringZ()
	end

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health 
	local cse_alife_helicopter__unk1_sz 
	local engine_sound 
		
	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = packet:r_stringZ()
		engine_sound = packet:r_stringZ()
	elseif	spawn_item == "vehicle_btr" then
		health = packet:r_float()
	end
	
	-- теперь заполняем нужнvе параметрv
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	if spawn_item == "helicopter" then
		packet:w_stringZ("[logic]\ncfg = scripts\\esc\\esc_blockpost_heli.ltx")
	elseif	spawn_item == "vehicle_btr" then
		packet:w_stringZ("[logic]\ncfg = scripts\\esc\\esc_blockpost_btr.ltx")
	end
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)
	
	if spawn_item == "helicopter" then
		packet:w_stringZ(motion_name)		
	end 
	
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = "idle"
		engine_sound = "alexmx\\helicopter"
		packet:w_stringZ(cse_alife_helicopter__unk1_sz)
		packet:w_stringZ(engine_sound)
	elseif  spawn_item == "vehicle_btr" then
		health = 1
		packet:w_float(health)
	end	
	-- считvваем скорректированнvе параметрv
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **       DYNWEATHERS       **   **   **   **    **   **   **   
--'*******************************************************************************
dynweathers={
	clear={
		clear=15,
		pasmurno=85,
		rain=0,
		groza=0
	},
	pasmurno={		
		clear=20,
		rain=20,
		groza=10,
		pasmurno=50	
	},
	rain={
		clear=0,
		groza=35,
		pasmurno=45,
		rain=20
	},
	groza={
		clear=0,
		rain=20,
		pasmurno=65,
		groza=15	
	}
}

function weather_manager()
end


--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       AMK_RESPAWNS     **   **   **   **   **    **   **   **   
--'*******************************************************************************
function switch_monster_online(obj)
	se_monster.need_be_online[obj.id]=true
end

function switch_monster_offline(obj)
	se_monster.need_be_online[obj.id]=false
end

function respawned(obj,respawner)
	if obj and IAmAMonster[obj:clsid()] then
		local sini = respawner:spawn_ini()
		if sini:line_exist ("respawn", "creature_binded_logic") == true then
			local cfg_name = utils.cfg_get_string(sini, "respawn", "creature_binded_logic", false, false, false, "")
			local t = amk.read_monster_params(obj)
			t.custom = "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx"
			amk.write_monster_params(t, obj)
		end
	elseif obj and IAmAStalker[obj:clsid()] then
		local sini = respawner:spawn_ini()
		if sini:line_exist ("respawn", "creature_binded_logic") == true then
			local cfg_name = utils.cfg_get_string(sini, "respawn", "creature_binded_logic", false, false, false, "")
			local t = amk.read_stalker_params(obj)
			t.custom = "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx"
			amk.write_stalker_params(t, obj)
		end
	end	
end

local respawners={}

function spawn_unspawned_respawners()

	for a=1,65534 do
		local obj = alife():object(a)
		if obj then
			local oini = obj:spawn_ini()
			if oini:line_exist ("respawn", "amk_name") == true then
				local amk_name = utils.cfg_get_string(oini, "respawn", "amk_name", false, false, false, false)
				if amk_name then respawners[amk_name]=true end
			end
		end
	end

	local iniFileName = "scripts\\amk\\amk_respawns.ltx"
	local sini = ini_file(iniFileName)
	
	local dv={}
	if iniLineSectionExist("default_values", iniFileName) then
		local result, id, value = nil, nil, nil
		for a=0,iniLinesCount("default_values", iniFileName)-1 do
			result, id, value = getIniLine("default_values",a,"","", iniFileName)
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				dv[amk.trim(id)]=amk.trim(value)
			end
		end
	end

	if iniLineSectionExist("amk_respawns", iniFileName) then
		local tmp={}
		local result, id, value = nil, nil, nil
		for a=0,iniLinesCount("amk_respawns", iniFileName)-1 do
			result, id, value = getIniLine("amk_respawns",a,"","", iniFileName)
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				table.insert(tmp, amk.trim(id))
			end
		end
		
		for k,v in pairs(tmp) do
			--local flag = utils.cfg_get_bool(sini, "amk_respawns", v, true, false, false)
			local flag = getIniValueBool("amk_respawns", v, false, iniFileName)
			if not respawners[v] and flag==true then
				--local t = amk.parse_ini_section_to_array(sini, v)
				local t = amk.parse_ini_section_to_array_new(iniFileName, v)
				local xyzlg = amk.str_explode(",",t.xyzlg,true)
				local pos = vector():set(tonumber(xyzlg[1]),tonumber(xyzlg[2]),tonumber(xyzlg[3]))
				local respawner = amk.spawn_item("respawn",pos,tonumber(xyzlg[5]),tonumber(xyzlg[4]))
				local tbl = amk.get_spawner_data(respawner)
				t.xyzlg = nil
				t.amk_name = v

				for kkk,vvv in pairs(dv) do
					if t[kkk]==nil then
						t[kkk]=vvv
					end
				end

				tbl.custom = amk.gen_custom_data({respawn=t})
				--amk.mylog(tbl.custom)
				amk.set_spawner_data(tbl, respawner)
				se_respawn.reinit_spawner_params(respawner:name())
				--amk.add_spot_on_map(respawner.id,"red_location", v)
				--amk.mylog("spawned respawn "..respawner.id)
			end
			if flag==false then
				local o = se_respawn.get_respawner_by_name(v)
				if o then
					--amk.mylog("released respawn "..o.id)
					alife():release(o)
				end
			end
		end
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **          OTHER        **   **   **   **   **    **   **   **   **   
--'*******************************************************************************

local last_armor_id=0
local last_condition=0

function repair_armor(val)
	local armor = db.actor:item_in_slot(6)
	if armor then
		last_armor_id=armor:id()
		last_condition=val
		armor:set_condition(val)
	end
end

function check_armor()
	local armor = db.actor:item_in_slot(6)
	local weapon = db.actor:item_in_slot(2)
	
	if db.actor:active_slot()==2 and weapon then
		local tmp
		if armor then 
			tmp = armor:section()
		else
			tmp = "none"
		end

		if (not string_find(tmp, "exo")) and weapon:section()=="wpn_m_134" then 
			db.actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_m_134")
			db.actor:transfer_item(weapon,db.actor)
			alife():release(tmpw)
              amk.send_tip(game.translate_string("wpn-m_134-no_exo_message"),"Minigun",0,8,"gen_info")
		end
	end
	
	if not armor then
		last_armor_id=0
		return
	end
	if armor:id()~=last_armor_id then
		last_armor_id=armor:id()
		last_condition=armor:condition()
		return
	end
	if last_condition<armor:condition() then
		armor:set_condition(last_condition)
	else
		last_condition=armor:condition()
	end
end

function dezombify(id,v)
	local npc=level.object_by_id(id)
	if npc then
		if npc:alive()==false then
			return true
		end
		local sobj=alife():object(id)
		if sobj then
			npc:set_character_community(v.comm,0,0)
			npc:set_goodwill(v.gw,db.actor)
			local orgtbl=amk.read_stalker_params(sobj)
			orgtbl.profile=string.gsub(orgtbl.profile,"(.*)_zombi","%1")
			-- amk.mylog("dezombified "..npc:name().." profile "..orgtbl.profile)
			amk.write_stalker_params(orgtbl,sobj)
			return true
		end    
	end
	return false
end

btrs_friends={}

function build_btrs_table(obj)
	--if obj and (IAmAStalker[obj:clsid()] and obj:character_community()=="military" and obj:alive()) or obj:section()=="vehicle_btr" then
			--btrs_friends[obj:id()] = obj:section()
	end


function firebated(obj, amount, local_direction, who, bone_index)
	if bone_index>0 and who and IAmAStalker[who:clsid()] then --false для отклічения
		local script
		if obj and IAmAMonster[obj:clsid()] then 
			script=bind_monster
		elseif obj and IAmAStalker[obj:clsid()] then
			script=xr_motivator
		end
		if script then
			local weapon = who:active_item()
			if not weapon or weapon:section()~="wpn_flame" then return end
			if string_find(obj:section(), "zomb") and obj.health<0.2 then obj:kill(obj) end
			script.play_particle(obj,
			{
				obj=obj,
				particle="amk\\flame",
				bone="bip01_spine1"
			})
		end
	end
end

local zombi_skeletons={
"physics\\dead_body\\skelet_combine_pose_03",
"physics\\dead_body\\skelet_combine_pose_04",
"physics\\dead_body\\skelet_combine_pose_05",
"physics\\dead_body\\skelet_torso"
}
function zomby_blow(obj)
	if obj:object("wpn_flame") then
		amk_particle.amk_particle({
				particle="explosions\\explosion_fuelcan",
				pos=obj:position(),
				sound=[[weapons\t_rgd5_explosion]]
			})
		local dist = db.actor:position():distance_to(obj:position())
		if dist < 10 and db.actor:see(obj) then
			local h = hit()
			h.impulse = 0
			h.draftsman = db.actor
			h.direction = vector():set(0,0,0)
			h:bone("bip01_spine") -- чтобv учитvвалась броня
			h.power = 1/dist
			h.type = hit.strike --chemical_burn
			db.actor:hit(h)
			h.power = 15/dist
			h.type = hit.chemical_burn
			db.actor:hit(h)
		end
		alife():release(alife():object(obj:id()))
		return
	end

	if obj:section()=="zombie_blow" then
		amk_particle.amk_particle({
				particle="amk\\zomb_explode",
				pos=obj:position(),
				sound=[[anomaly\anomaly_body_tear_1]]
			})
		local dist = db.actor:position():distance_to(obj:position())
		if dist < 30 and db.actor:see(obj) then
			local h = hit()
    	h.impulse = 0
		h.draftsman = db.actor
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine") -- чтобv учитvвалась броня
    	h.power = 1/dist
    	h.type = hit.strike --chemical_burn
		db.actor:hit(h)
    	h.power = 15/dist
    	h.type = hit.chemical_burn
		db.actor:hit(h)
		end
		local skel = amk.spawn_item("breakable_object",obj:position(),obj:game_vertex_id(),obj:level_vertex_id())
		local t = amk.get_breakable_data(skel)
		t.visual = zombi_skeletons[math_random(#zombi_skeletons)]
		t.mass = 1.0
		t.physic_type = 3
		t.skeleton_flags = 1
		amk.set_breakable_data(t,skel)
		alife():release(alife():object(obj:id()))
	end
end

function repair_weapon (st)
	local arr = amk.unpack_array_from_string(st)
	local oid = arr[1]
	local repbox_health = arr[2]
	local slot = arr[3]
	if alife():object(oid)==nil then
		local repair_coef = 0                                   
		local item_in_slot = db.actor:item_in_slot(slot)  
		if repbox_health==1 then                                 
			repair_coef=0.25                                           
		elseif repbox_health<1 then                       
			repair_coef=0.2                                         
		elseif repbox_health<0.8 then                       
			repair_coef=0.15                                            
		elseif repbox_health<0.6 then                        
			repair_coef=0.1                                         
		elseif repbox_health<0.4 then                        
			repair_coef=0.05         
		end	 
		--------------------------------------------------------------------------- 
		local rem
		
		if item_in_slot == nil then
			amk.send_tip(game.translate_string("rep_no_weapon_in_slot"),nil,nil,5)
			rem = amk.spawn_item_in_inv("repbox_s"..slot)
			amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health} )
		else
			if item_in_slot:condition()>0.95 then
				amk.send_tip(game.translate_string("rep_not_need"),nil,nil,5)
				rem = amk.spawn_item_in_inv("repbox_s"..slot)
				amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health} )
			else 
				if item_in_slot:condition()>=0.7 then
					item_in_slot:set_condition(item_in_slot:condition() + repair_coef)
					if repbox_health>0.3 then
						rem = amk.spawn_item_in_inv("repbox_s"..slot)
						amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health-0.2} )
					end
				else
					amk.send_tip(game.translate_string("rep_need_big"),nil,nil,5)
					rem = amk.spawn_item_in_inv("repbox_s"..slot)
					amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health} )
				end
			end
		end
	end

end

function after_repair_weapon (st)
	local arr = amk.unpack_array_from_string(st)
	local oid = arr[1]
	local repbox_health = arr[2]
	local lobj = level.object_by_id(oid)
	if lobj then
		lobj:set_condition(repbox_health)
	end
end

function fake_weapon (st)
monnoroch.fake_weapon (st)
end

function firebat_ammo()
	local ammo=db.actor:object("ammo_flame")
	if ammo then
		db.actor:iterate_inventory(
			function(dummy,item)
				if item:section()=="ammo_flame" then
					alife():release(alife():object(item:id()))
				end
			end
			, db.actor)
	end
end
